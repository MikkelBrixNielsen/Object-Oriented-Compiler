
# parsetab.py
# This file is automatically generated. Do not edit.
# pylint: disable=W,C,R
_tabversion = '3.10'

_lr_method = 'LALR'

_lr_signature = 'rightEQNEQLTGTLTEGTEleftPLUSMINUSleftTIMESDIVIDEASSIGN BOOL CHAR CLASS COMMA DIVIDE DO DOT ELSE EQ FLOAT FUNCTION GT GTE IDENT IF INT LCURL LPAREN LT LTE MINUS NEQ PLUS PRINT RCURL RETURN RPAREN SEMICOL THEN TIMES WHILEprogram : global_bodyempty :global_body : optional_variables_declaration_list optional_assignment_list function optional_functions_declaration_list optional_class_declaration_listoptional_assignment_list : empty\n                                | assignment_listassignment_list : statement_assignment\n                       | statement_assignment assignment_listbody : optional_variables_declaration_list optional_functions_declaration_list optional_statement_listoptional_variables_declaration_list : empty\n                                           | variables_declaration_listvariables_declaration_list : TYPE variables_list SEMICOL\n                                  | TYPE variables_list SEMICOL variables_declaration_listTYPE : INT\n            | FLOAT\n            | BOOL\n            | CHARvariables_list : IDENT\n                      | IDENT COMMA variables_listoptional_class_declaration_list : empty\n                                       | class_declaration_listclass_declaration_list : class_declaration\n                              | class_declaration class_declaration_listclass_declaration : CLASS IDENT optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list RCURLoptional_extends : emptyoptional_functions_declaration_list : empty\n                                           | functions_declaration_listfunctions_declaration_list : function\n                                  | function functions_declaration_listfunction : FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURLoptional_parameter_list : empty\n                               | parameter_listparameter_list : TYPE IDENT\n                      | TYPE IDENT COMMA parameter_liststatement : statement_return\n                 | statement_print\n                 | statement_assignment\n                 | statement_ifthenelse\n                 | statement_while\n                 | statement_compoundstatement_return : RETURN expression SEMICOLstatement_print : PRINT LPAREN expression RPAREN SEMICOLstatement_assignment : IDENT ASSIGN expression SEMICOLstatement_ifthenelse : IF expression THEN statement ELSE statementstatement_while :  WHILE expression DO statementstatement_compound :  LCURL statement_list RCURLoptional_statement_list : empty\n                               | statement_liststatement_list : statement\n                      | statement statement_listexpression : expression_integer\n                  | expression_float\n                  | expression_bool\n                  | expression_char\n                  | expression_identifier\n                  | expression_call\n                  | expression_binop\n                  | expression_attributeexpression_integer : INTexpression_float : FLOATexpression_bool : BOOLexpression_char : CHARexpression_identifier : IDENTexpression_call : IDENT LPAREN optional_expression_list RPARENexpression_attribute : IDENT DOT IDENTexpression_binop : expression PLUS expression\n                        | expression MINUS expression\n                        | expression TIMES expression\n                        | expression DIVIDE expression\n                        | expression EQ expression\n                        | expression NEQ expression\n                        | expression LT expression\n                        | expression GT expression\n                        | expression LTE expression\n                        | expression GTE expressionoptional_expression_list : empty\n                                | expression_listexpression_list : expression\n                       | expression COMMA expression_list'
    
_lr_action_items = {'IDENT':([0,3,4,5,6,7,8,9,10,14,21,22,23,24,26,27,28,43,45,50,52,53,54,55,56,57,58,59,60,61,62,63,64,85,90,97,101,103,104,108,109,110,111,112,113,114,115,117,118,119,122,126,128,129,130,133,134,135,136,],[-2,15,-9,-10,17,-13,-14,-15,-16,15,29,-11,17,-27,-25,-26,51,-12,-28,66,29,72,-42,29,29,29,29,29,29,29,29,29,29,92,29,-2,-2,-29,15,15,-34,-35,-36,-37,-38,-39,29,29,29,15,29,-40,15,15,-45,-44,-41,15,-43,]),'FUNCTION':([0,3,4,5,11,12,13,14,18,20,22,24,43,54,91,95,97,101,103,],[-2,-2,-9,-10,19,-4,-5,-6,19,-7,-11,19,-12,-42,-2,19,-2,19,-29,]),'INT':([0,19,21,22,52,55,56,57,58,59,60,61,62,63,64,67,90,91,96,97,115,117,118,122,],[7,7,39,7,39,39,39,39,39,39,39,39,39,39,39,7,39,7,7,7,39,39,39,39,]),'FLOAT':([0,19,21,22,52,55,56,57,58,59,60,61,62,63,64,67,90,91,96,97,115,117,118,122,],[8,8,40,8,40,40,40,40,40,40,40,40,40,40,40,8,40,8,8,8,40,40,40,40,]),'BOOL':([0,19,21,22,52,55,56,57,58,59,60,61,62,63,64,67,90,91,96,97,115,117,118,122,],[9,9,41,9,41,41,41,41,41,41,41,41,41,41,41,9,41,9,9,9,41,41,41,41,]),'CHAR':([0,19,21,22,52,55,56,57,58,59,60,61,62,63,64,67,90,91,96,97,115,117,118,122,],[10,10,42,10,42,42,42,42,42,42,42,42,42,42,42,10,42,10,10,10,42,42,42,42,]),'$end':([1,2,18,24,25,26,27,45,46,47,48,49,65,102,103,],[0,-1,-2,-27,-2,-25,-26,-28,-3,-19,-20,-21,-22,-23,-29,]),'RCURL':([4,5,22,24,26,27,43,45,54,91,95,97,98,100,101,103,104,105,106,107,108,109,110,111,112,113,114,120,125,126,130,133,134,136,],[-9,-10,-11,-27,-25,-26,-12,-28,-42,-2,-2,-2,102,103,-2,-29,-2,-8,-46,-47,-48,-34,-35,-36,-37,-38,-39,-49,130,-40,-45,-44,-41,-43,]),'RETURN':([4,5,22,24,26,27,43,45,54,97,101,103,104,108,109,110,111,112,113,114,119,126,128,129,130,133,134,135,136,],[-9,-10,-11,-27,-25,-26,-12,-28,-42,-2,-2,-29,115,115,-34,-35,-36,-37,-38,-39,115,-40,115,115,-45,-44,-41,115,-43,]),'PRINT':([4,5,22,24,26,27,43,45,54,97,101,103,104,108,109,110,111,112,113,114,119,126,128,129,130,133,134,135,136,],[-9,-10,-11,-27,-25,-26,-12,-28,-42,-2,-2,-29,116,116,-34,-35,-36,-37,-38,-39,116,-40,116,116,-45,-44,-41,116,-43,]),'IF':([4,5,22,24,26,27,43,45,54,97,101,103,104,108,109,110,111,112,113,114,119,126,128,129,130,133,134,135,136,],[-9,-10,-11,-27,-25,-26,-12,-28,-42,-2,-2,-29,117,117,-34,-35,-36,-37,-38,-39,117,-40,117,117,-45,-44,-41,117,-43,]),'WHILE':([4,5,22,24,26,27,43,45,54,97,101,103,104,108,109,110,111,112,113,114,119,126,128,129,130,133,134,135,136,],[-9,-10,-11,-27,-25,-26,-12,-28,-42,-2,-2,-29,118,118,-34,-35,-36,-37,-38,-39,118,-40,118,118,-45,-44,-41,118,-43,]),'LCURL':([4,5,22,24,26,27,43,45,54,66,83,84,93,97,101,103,104,108,109,110,111,112,113,114,119,126,128,129,130,133,134,135,136,],[-9,-10,-11,-27,-25,-26,-12,-28,-42,-2,91,-24,97,-2,-2,-29,119,119,-34,-35,-36,-37,-38,-39,119,-40,119,119,-45,-44,-41,119,-43,]),'ASSIGN':([15,],[21,]),'SEMICOL':([16,17,29,30,31,32,33,34,35,36,37,38,39,40,41,42,44,72,73,74,75,76,77,78,79,80,81,82,89,121,131,],[22,-17,-62,54,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-18,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-63,126,134,]),'COMMA':([17,29,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,92,],[23,-62,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,90,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-63,96,]),'CLASS':([18,24,25,26,27,45,49,102,103,],[-2,-27,50,-25,-26,-28,50,-23,-29,]),'PLUS':([29,30,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,121,123,124,127,],[-62,55,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,55,-64,-65,-66,-67,-68,55,55,55,55,55,55,-63,55,55,55,55,]),'MINUS':([29,30,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,121,123,124,127,],[-62,56,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,56,-64,-65,-66,-67,-68,56,56,56,56,56,56,-63,56,56,56,56,]),'TIMES':([29,30,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,121,123,124,127,],[-62,57,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,57,-64,57,57,-67,-68,57,57,57,57,57,57,-63,57,57,57,57,]),'DIVIDE':([29,30,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,121,123,124,127,],[-62,58,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,58,-64,58,58,-67,-68,58,58,58,58,58,58,-63,58,58,58,58,]),'EQ':([29,30,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,121,123,124,127,],[-62,59,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,59,-64,-65,-66,-67,-68,59,59,59,59,59,59,-63,59,59,59,59,]),'NEQ':([29,30,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,121,123,124,127,],[-62,60,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,60,-64,-65,-66,-67,-68,60,60,60,60,60,60,-63,60,60,60,60,]),'LT':([29,30,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,121,123,124,127,],[-62,61,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,61,-64,-65,-66,-67,-68,61,61,61,61,61,61,-63,61,61,61,61,]),'GT':([29,30,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,121,123,124,127,],[-62,62,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,62,-64,-65,-66,-67,-68,62,62,62,62,62,62,-63,62,62,62,62,]),'LTE':([29,30,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,121,123,124,127,],[-62,63,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,63,-64,-65,-66,-67,-68,63,63,63,63,63,63,-63,63,63,63,63,]),'GTE':([29,30,31,32,33,34,35,36,37,38,39,40,41,42,71,72,73,74,75,76,77,78,79,80,81,82,89,121,123,124,127,],[-62,64,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,64,-64,-65,-66,-67,-68,64,64,64,64,64,64,-63,64,64,64,64,]),'RPAREN':([29,31,32,33,34,35,36,37,38,39,40,41,42,52,67,68,69,70,71,72,73,74,75,76,77,78,79,80,81,82,86,87,88,89,92,94,99,127,],[-62,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-2,-2,89,-75,-76,-77,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,93,-30,-31,-63,-32,-78,-33,131,]),'THEN':([29,31,32,33,34,35,36,37,38,39,40,41,42,72,73,74,75,76,77,78,79,80,81,82,89,123,],[-62,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-63,128,]),'DO':([29,31,32,33,34,35,36,37,38,39,40,41,42,72,73,74,75,76,77,78,79,80,81,82,89,124,],[-62,-50,-51,-52,-53,-54,-55,-56,-57,-58,-59,-60,-61,-64,-65,-66,-67,-68,-69,-70,-71,-72,-73,-74,-63,129,]),'LPAREN':([29,51,116,],[52,67,122,]),'DOT':([29,],[53,]),'ELSE':([54,109,110,111,112,113,114,126,130,132,133,134,136,],[-42,-34,-35,-36,-37,-38,-39,-40,-45,135,-44,-41,-43,]),}

_lr_action = {}
for _k, _v in _lr_action_items.items():
   for _x,_y in zip(_v[0],_v[1]):
      if not _x in _lr_action:  _lr_action[_x] = {}
      _lr_action[_x][_k] = _y
del _lr_action_items

_lr_goto_items = {'program':([0,],[1,]),'global_body':([0,],[2,]),'optional_variables_declaration_list':([0,91,97,],[3,95,101,]),'empty':([0,3,18,25,52,66,67,91,95,97,101,104,],[4,12,26,47,69,84,87,4,26,4,26,106,]),'variables_declaration_list':([0,22,91,97,],[5,43,5,5,]),'TYPE':([0,19,22,67,91,96,97,],[6,28,6,85,6,85,6,]),'optional_assignment_list':([3,],[11,]),'assignment_list':([3,14,],[13,20,]),'statement_assignment':([3,14,104,108,119,128,129,135,],[14,14,111,111,111,111,111,111,]),'variables_list':([6,23,],[16,44,]),'function':([11,18,24,95,101,],[18,24,24,24,24,]),'optional_functions_declaration_list':([18,95,101,],[25,98,104,]),'functions_declaration_list':([18,24,95,101,],[27,45,27,27,]),'expression':([21,52,55,56,57,58,59,60,61,62,63,64,90,115,117,118,122,],[30,71,73,74,75,76,77,78,79,80,81,82,71,121,123,124,127,]),'expression_integer':([21,52,55,56,57,58,59,60,61,62,63,64,90,115,117,118,122,],[31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,31,]),'expression_float':([21,52,55,56,57,58,59,60,61,62,63,64,90,115,117,118,122,],[32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,32,]),'expression_bool':([21,52,55,56,57,58,59,60,61,62,63,64,90,115,117,118,122,],[33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,33,]),'expression_char':([21,52,55,56,57,58,59,60,61,62,63,64,90,115,117,118,122,],[34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,34,]),'expression_identifier':([21,52,55,56,57,58,59,60,61,62,63,64,90,115,117,118,122,],[35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,35,]),'expression_call':([21,52,55,56,57,58,59,60,61,62,63,64,90,115,117,118,122,],[36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,36,]),'expression_binop':([21,52,55,56,57,58,59,60,61,62,63,64,90,115,117,118,122,],[37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,37,]),'expression_attribute':([21,52,55,56,57,58,59,60,61,62,63,64,90,115,117,118,122,],[38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,38,]),'optional_class_declaration_list':([25,],[46,]),'class_declaration_list':([25,49,],[48,65,]),'class_declaration':([25,49,],[49,49,]),'optional_expression_list':([52,],[68,]),'expression_list':([52,90,],[70,94,]),'optional_extends':([66,],[83,]),'optional_parameter_list':([67,],[86,]),'parameter_list':([67,96,],[88,99,]),'body':([97,],[100,]),'optional_statement_list':([104,],[105,]),'statement_list':([104,108,119,],[107,120,125,]),'statement':([104,108,119,128,129,135,],[108,108,108,132,133,136,]),'statement_return':([104,108,119,128,129,135,],[109,109,109,109,109,109,]),'statement_print':([104,108,119,128,129,135,],[110,110,110,110,110,110,]),'statement_ifthenelse':([104,108,119,128,129,135,],[112,112,112,112,112,112,]),'statement_while':([104,108,119,128,129,135,],[113,113,113,113,113,113,]),'statement_compound':([104,108,119,128,129,135,],[114,114,114,114,114,114,]),}

_lr_goto = {}
for _k, _v in _lr_goto_items.items():
   for _x, _y in zip(_v[0], _v[1]):
       if not _x in _lr_goto: _lr_goto[_x] = {}
       _lr_goto[_x][_k] = _y
del _lr_goto_items
_lr_productions = [
  ("S' -> program","S'",1,None,None,None),
  ('program -> global_body','program',1,'p_program','lexer_parser.py',146),
  ('empty -> <empty>','empty',0,'p_empty','lexer_parser.py',151),
  ('global_body -> optional_variables_declaration_list optional_assignment_list function optional_functions_declaration_list optional_class_declaration_list','global_body',5,'p_global_body','lexer_parser.py',156),
  ('optional_assignment_list -> empty','optional_assignment_list',1,'p_optional_assignment_list','lexer_parser.py',160),
  ('optional_assignment_list -> assignment_list','optional_assignment_list',1,'p_optional_assignment_list','lexer_parser.py',161),
  ('assignment_list -> statement_assignment','assignment_list',1,'p_assignment_list','lexer_parser.py',165),
  ('assignment_list -> statement_assignment assignment_list','assignment_list',2,'p_assignment_list','lexer_parser.py',166),
  ('body -> optional_variables_declaration_list optional_functions_declaration_list optional_statement_list','body',3,'p_body','lexer_parser.py',175),
  ('optional_variables_declaration_list -> empty','optional_variables_declaration_list',1,'p_optional_variables_declaration_list','lexer_parser.py',179),
  ('optional_variables_declaration_list -> variables_declaration_list','optional_variables_declaration_list',1,'p_optional_variables_declaration_list','lexer_parser.py',180),
  ('variables_declaration_list -> TYPE variables_list SEMICOL','variables_declaration_list',3,'p_variables_declaration_list','lexer_parser.py',184),
  ('variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list','variables_declaration_list',4,'p_variables_declaration_list','lexer_parser.py',185),
  ('TYPE -> INT','TYPE',1,'p_TYPE','lexer_parser.py',192),
  ('TYPE -> FLOAT','TYPE',1,'p_TYPE','lexer_parser.py',193),
  ('TYPE -> BOOL','TYPE',1,'p_TYPE','lexer_parser.py',194),
  ('TYPE -> CHAR','TYPE',1,'p_TYPE','lexer_parser.py',195),
  ('variables_list -> IDENT','variables_list',1,'p_variables_list','lexer_parser.py',201),
  ('variables_list -> IDENT COMMA variables_list','variables_list',3,'p_variables_list','lexer_parser.py',202),
  ('optional_class_declaration_list -> empty','optional_class_declaration_list',1,'p_optional_class_declaration_list','lexer_parser.py',211),
  ('optional_class_declaration_list -> class_declaration_list','optional_class_declaration_list',1,'p_optional_class_declaration_list','lexer_parser.py',212),
  ('class_declaration_list -> class_declaration','class_declaration_list',1,'p_class_declaration_list','lexer_parser.py',221),
  ('class_declaration_list -> class_declaration class_declaration_list','class_declaration_list',2,'p_class_declaration_list','lexer_parser.py',222),
  ('class_declaration -> CLASS IDENT optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list RCURL','class_declaration',7,'p_class_declaration','lexer_parser.py',231),
  ('optional_extends -> empty','optional_extends',1,'p_optional_extends','lexer_parser.py',235),
  ('optional_functions_declaration_list -> empty','optional_functions_declaration_list',1,'p_optional_functions_declaration_list','lexer_parser.py',243),
  ('optional_functions_declaration_list -> functions_declaration_list','optional_functions_declaration_list',1,'p_optional_functions_declaration_list','lexer_parser.py',244),
  ('functions_declaration_list -> function','functions_declaration_list',1,'p_functions_declaration_list','lexer_parser.py',249),
  ('functions_declaration_list -> function functions_declaration_list','functions_declaration_list',2,'p_functions_declaration_list','lexer_parser.py',250),
  ('function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL','function',9,'p_function','lexer_parser.py',258),
  ('optional_parameter_list -> empty','optional_parameter_list',1,'p_optional_parameter_list','lexer_parser.py',263),
  ('optional_parameter_list -> parameter_list','optional_parameter_list',1,'p_optional_parameter_list','lexer_parser.py',264),
  ('parameter_list -> TYPE IDENT','parameter_list',2,'p_parameter_list','lexer_parser.py',269),
  ('parameter_list -> TYPE IDENT COMMA parameter_list','parameter_list',4,'p_parameter_list','lexer_parser.py',270),
  ('statement -> statement_return','statement',1,'p_statement','lexer_parser.py',278),
  ('statement -> statement_print','statement',1,'p_statement','lexer_parser.py',279),
  ('statement -> statement_assignment','statement',1,'p_statement','lexer_parser.py',280),
  ('statement -> statement_ifthenelse','statement',1,'p_statement','lexer_parser.py',281),
  ('statement -> statement_while','statement',1,'p_statement','lexer_parser.py',282),
  ('statement -> statement_compound','statement',1,'p_statement','lexer_parser.py',283),
  ('statement_return -> RETURN expression SEMICOL','statement_return',3,'p_statement_return','lexer_parser.py',288),
  ('statement_print -> PRINT LPAREN expression RPAREN SEMICOL','statement_print',5,'p_statement_print','lexer_parser.py',293),
  ('statement_assignment -> IDENT ASSIGN expression SEMICOL','statement_assignment',4,'p_statement_assignment','lexer_parser.py',298),
  ('statement_ifthenelse -> IF expression THEN statement ELSE statement','statement_ifthenelse',6,'p_statement_ifthenelse','lexer_parser.py',303),
  ('statement_while -> WHILE expression DO statement','statement_while',4,'p_statement_while','lexer_parser.py',308),
  ('statement_compound -> LCURL statement_list RCURL','statement_compound',3,'p_statement_compound','lexer_parser.py',313),
  ('optional_statement_list -> empty','optional_statement_list',1,'p_optional_statement_list','lexer_parser.py',318),
  ('optional_statement_list -> statement_list','optional_statement_list',1,'p_optional_statement_list','lexer_parser.py',319),
  ('statement_list -> statement','statement_list',1,'p_statement_list','lexer_parser.py',324),
  ('statement_list -> statement statement_list','statement_list',2,'p_statement_list','lexer_parser.py',325),
  ('expression -> expression_integer','expression',1,'p_expression','lexer_parser.py',333),
  ('expression -> expression_float','expression',1,'p_expression','lexer_parser.py',334),
  ('expression -> expression_bool','expression',1,'p_expression','lexer_parser.py',335),
  ('expression -> expression_char','expression',1,'p_expression','lexer_parser.py',336),
  ('expression -> expression_identifier','expression',1,'p_expression','lexer_parser.py',337),
  ('expression -> expression_call','expression',1,'p_expression','lexer_parser.py',338),
  ('expression -> expression_binop','expression',1,'p_expression','lexer_parser.py',339),
  ('expression -> expression_attribute','expression',1,'p_expression','lexer_parser.py',340),
  ('expression_integer -> INT','expression_integer',1,'p_expression_integer','lexer_parser.py',346),
  ('expression_float -> FLOAT','expression_float',1,'p_expression_float','lexer_parser.py',351),
  ('expression_bool -> BOOL','expression_bool',1,'p_expression_bool','lexer_parser.py',356),
  ('expression_char -> CHAR','expression_char',1,'p_expression_char','lexer_parser.py',361),
  ('expression_identifier -> IDENT','expression_identifier',1,'p_expression_identifier','lexer_parser.py',371),
  ('expression_call -> IDENT LPAREN optional_expression_list RPAREN','expression_call',4,'p_expression_call','lexer_parser.py',376),
  ('expression_attribute -> IDENT DOT IDENT','expression_attribute',3,'p_expression_attribute','lexer_parser.py',380),
  ('expression_binop -> expression PLUS expression','expression_binop',3,'p_expression_binop','lexer_parser.py',384),
  ('expression_binop -> expression MINUS expression','expression_binop',3,'p_expression_binop','lexer_parser.py',385),
  ('expression_binop -> expression TIMES expression','expression_binop',3,'p_expression_binop','lexer_parser.py',386),
  ('expression_binop -> expression DIVIDE expression','expression_binop',3,'p_expression_binop','lexer_parser.py',387),
  ('expression_binop -> expression EQ expression','expression_binop',3,'p_expression_binop','lexer_parser.py',388),
  ('expression_binop -> expression NEQ expression','expression_binop',3,'p_expression_binop','lexer_parser.py',389),
  ('expression_binop -> expression LT expression','expression_binop',3,'p_expression_binop','lexer_parser.py',390),
  ('expression_binop -> expression GT expression','expression_binop',3,'p_expression_binop','lexer_parser.py',391),
  ('expression_binop -> expression LTE expression','expression_binop',3,'p_expression_binop','lexer_parser.py',392),
  ('expression_binop -> expression GTE expression','expression_binop',3,'p_expression_binop','lexer_parser.py',393),
  ('optional_expression_list -> empty','optional_expression_list',1,'p_optional_expression_list','lexer_parser.py',399),
  ('optional_expression_list -> expression_list','optional_expression_list',1,'p_optional_expression_list','lexer_parser.py',400),
  ('expression_list -> expression','expression_list',1,'p_expression_list','lexer_parser.py',405),
  ('expression_list -> expression COMMA expression_list','expression_list',3,'p_expression_list','lexer_parser.py',406),
]
