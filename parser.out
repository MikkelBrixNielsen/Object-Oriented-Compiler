Created by PLY version 3.11 (http://www.dabeaz.com/ply)

Grammar

Rule 0     S' -> program
Rule 1     program -> global_body
Rule 2     empty -> <empty>
Rule 3     global_body -> optional_variables_declaration_list optional_assignment_list function optional_functions_declaration_list optional_class_declaration_list
Rule 4     optional_assignment_list -> empty
Rule 5     optional_assignment_list -> assignment_list
Rule 6     assignment_list -> statement_assignment
Rule 7     assignment_list -> statement_assignment assignment_list
Rule 8     body -> optional_variables_declaration_list optional_functions_declaration_list optional_statement_list
Rule 9     optional_variables_declaration_list -> empty
Rule 10    optional_variables_declaration_list -> variables_declaration_list
Rule 11    variables_declaration_list -> TYPE variables_list SEMICOL
Rule 12    variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list
Rule 13    TYPE -> INT
Rule 14    TYPE -> FLOAT
Rule 15    TYPE -> BOOL
Rule 16    TYPE -> CHAR
Rule 17    variables_list -> IDENT
Rule 18    variables_list -> IDENT COMMA variables_list
Rule 19    optional_class_declaration_list -> empty
Rule 20    optional_class_declaration_list -> class_declaration_list
Rule 21    class_declaration_list -> class_declaration
Rule 22    class_declaration_list -> class_declaration class_declaration_list
Rule 23    class_declaration -> CLASS IDENT optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list RCURL
Rule 24    optional_extends -> empty
Rule 25    optional_functions_declaration_list -> empty
Rule 26    optional_functions_declaration_list -> functions_declaration_list
Rule 27    functions_declaration_list -> function
Rule 28    functions_declaration_list -> function functions_declaration_list
Rule 29    function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL
Rule 30    optional_parameter_list -> empty
Rule 31    optional_parameter_list -> parameter_list
Rule 32    parameter_list -> TYPE IDENT
Rule 33    parameter_list -> TYPE IDENT COMMA parameter_list
Rule 34    statement -> statement_return
Rule 35    statement -> statement_print
Rule 36    statement -> statement_assignment
Rule 37    statement -> statement_ifthenelse
Rule 38    statement -> statement_while
Rule 39    statement -> statement_compound
Rule 40    statement_return -> RETURN expression SEMICOL
Rule 41    statement_print -> PRINT LPAREN expression RPAREN SEMICOL
Rule 42    statement_assignment -> IDENT ASSIGN expression SEMICOL
Rule 43    statement_ifthenelse -> IF expression THEN statement ELSE statement
Rule 44    statement_while -> WHILE expression DO statement
Rule 45    statement_compound -> LCURL statement_list RCURL
Rule 46    optional_statement_list -> empty
Rule 47    optional_statement_list -> statement_list
Rule 48    statement_list -> statement
Rule 49    statement_list -> statement statement_list
Rule 50    expression -> expression_integer
Rule 51    expression -> expression_float
Rule 52    expression -> expression_bool
Rule 53    expression -> expression_char
Rule 54    expression -> expression_identifier
Rule 55    expression -> expression_call
Rule 56    expression -> expression_binop
Rule 57    expression -> expression_attribute
Rule 58    expression_integer -> INT
Rule 59    expression_float -> FLOAT
Rule 60    expression_bool -> BOOL
Rule 61    expression_char -> CHAR
Rule 62    expression_identifier -> IDENT
Rule 63    expression_call -> IDENT LPAREN optional_expression_list RPAREN
Rule 64    expression_attribute -> IDENT DOT IDENT
Rule 65    expression_binop -> expression PLUS expression
Rule 66    expression_binop -> expression MINUS expression
Rule 67    expression_binop -> expression TIMES expression
Rule 68    expression_binop -> expression DIVIDE expression
Rule 69    expression_binop -> expression EQ expression
Rule 70    expression_binop -> expression NEQ expression
Rule 71    expression_binop -> expression LT expression
Rule 72    expression_binop -> expression GT expression
Rule 73    expression_binop -> expression LTE expression
Rule 74    expression_binop -> expression GTE expression
Rule 75    optional_expression_list -> empty
Rule 76    optional_expression_list -> expression_list
Rule 77    expression_list -> expression
Rule 78    expression_list -> expression COMMA expression_list

Terminals, with rules where they appear

ASSIGN               : 42
BOOL                 : 15 60
CHAR                 : 16 61
CLASS                : 23
COMMA                : 18 33 78
DIVIDE               : 68
DO                   : 44
DOT                  : 64
ELSE                 : 43
EQ                   : 69
FLOAT                : 14 59
FUNCTION             : 29
GT                   : 72
GTE                  : 74
IDENT                : 17 18 23 29 32 33 42 62 63 64 64
IF                   : 43
INT                  : 13 58
LCURL                : 23 29 45
LPAREN               : 29 41 63
LT                   : 71
LTE                  : 73
MINUS                : 66
NEQ                  : 70
PLUS                 : 65
PRINT                : 41
RCURL                : 23 29 45
RETURN               : 40
RPAREN               : 29 41 63
SEMICOL              : 11 12 40 41 42
THEN                 : 43
TIMES                : 67
WHILE                : 44
error                : 

Nonterminals, with rules where they appear

TYPE                 : 11 12 29 32 33
assignment_list      : 5 7
body                 : 29
class_declaration    : 21 22
class_declaration_list : 20 22
empty                : 4 9 19 24 25 30 46 75
expression           : 40 41 42 43 44 65 65 66 66 67 67 68 68 69 69 70 70 71 71 72 72 73 73 74 74 77 78
expression_attribute : 57
expression_binop     : 56
expression_bool      : 52
expression_call      : 55
expression_char      : 53
expression_float     : 51
expression_identifier : 54
expression_integer   : 50
expression_list      : 76 78
function             : 3 27 28
functions_declaration_list : 26 28
global_body          : 1
optional_assignment_list : 3
optional_class_declaration_list : 3
optional_expression_list : 63
optional_extends     : 23
optional_functions_declaration_list : 3 8 23
optional_parameter_list : 29
optional_statement_list : 8
optional_variables_declaration_list : 3 8 23
parameter_list       : 31 33
program              : 0
statement            : 43 43 44 48 49
statement_assignment : 6 7 36
statement_compound   : 39
statement_ifthenelse : 37
statement_list       : 45 47 49
statement_print      : 35
statement_return     : 34
statement_while      : 38
variables_declaration_list : 10 12
variables_list       : 11 12 18

Parsing method: LALR

state 0

    (0) S' -> . program
    (1) program -> . global_body
    (3) global_body -> . optional_variables_declaration_list optional_assignment_list function optional_functions_declaration_list optional_class_declaration_list
    (9) optional_variables_declaration_list -> . empty
    (10) optional_variables_declaration_list -> . variables_declaration_list
    (2) empty -> .
    (11) variables_declaration_list -> . TYPE variables_list SEMICOL
    (12) variables_declaration_list -> . TYPE variables_list SEMICOL variables_declaration_list
    (13) TYPE -> . INT
    (14) TYPE -> . FLOAT
    (15) TYPE -> . BOOL
    (16) TYPE -> . CHAR

    IDENT           reduce using rule 2 (empty -> .)
    FUNCTION        reduce using rule 2 (empty -> .)
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    program                        shift and go to state 1
    global_body                    shift and go to state 2
    optional_variables_declaration_list shift and go to state 3
    empty                          shift and go to state 4
    variables_declaration_list     shift and go to state 5
    TYPE                           shift and go to state 6

state 1

    (0) S' -> program .



state 2

    (1) program -> global_body .

    $end            reduce using rule 1 (program -> global_body .)


state 3

    (3) global_body -> optional_variables_declaration_list . optional_assignment_list function optional_functions_declaration_list optional_class_declaration_list
    (4) optional_assignment_list -> . empty
    (5) optional_assignment_list -> . assignment_list
    (2) empty -> .
    (6) assignment_list -> . statement_assignment
    (7) assignment_list -> . statement_assignment assignment_list
    (42) statement_assignment -> . IDENT ASSIGN expression SEMICOL

    FUNCTION        reduce using rule 2 (empty -> .)
    IDENT           shift and go to state 15

    optional_assignment_list       shift and go to state 11
    empty                          shift and go to state 12
    assignment_list                shift and go to state 13
    statement_assignment           shift and go to state 14

state 4

    (9) optional_variables_declaration_list -> empty .

    IDENT           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    FUNCTION        reduce using rule 9 (optional_variables_declaration_list -> empty .)
    RCURL           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    RETURN          reduce using rule 9 (optional_variables_declaration_list -> empty .)
    PRINT           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    IF              reduce using rule 9 (optional_variables_declaration_list -> empty .)
    WHILE           reduce using rule 9 (optional_variables_declaration_list -> empty .)
    LCURL           reduce using rule 9 (optional_variables_declaration_list -> empty .)


state 5

    (10) optional_variables_declaration_list -> variables_declaration_list .

    IDENT           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    FUNCTION        reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    RCURL           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    RETURN          reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    PRINT           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    IF              reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    WHILE           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)
    LCURL           reduce using rule 10 (optional_variables_declaration_list -> variables_declaration_list .)


state 6

    (11) variables_declaration_list -> TYPE . variables_list SEMICOL
    (12) variables_declaration_list -> TYPE . variables_list SEMICOL variables_declaration_list
    (17) variables_list -> . IDENT
    (18) variables_list -> . IDENT COMMA variables_list

    IDENT           shift and go to state 17

    variables_list                 shift and go to state 16

state 7

    (13) TYPE -> INT .

    IDENT           reduce using rule 13 (TYPE -> INT .)


state 8

    (14) TYPE -> FLOAT .

    IDENT           reduce using rule 14 (TYPE -> FLOAT .)


state 9

    (15) TYPE -> BOOL .

    IDENT           reduce using rule 15 (TYPE -> BOOL .)


state 10

    (16) TYPE -> CHAR .

    IDENT           reduce using rule 16 (TYPE -> CHAR .)


state 11

    (3) global_body -> optional_variables_declaration_list optional_assignment_list . function optional_functions_declaration_list optional_class_declaration_list
    (29) function -> . FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL

    FUNCTION        shift and go to state 19

    function                       shift and go to state 18

state 12

    (4) optional_assignment_list -> empty .

    FUNCTION        reduce using rule 4 (optional_assignment_list -> empty .)


state 13

    (5) optional_assignment_list -> assignment_list .

    FUNCTION        reduce using rule 5 (optional_assignment_list -> assignment_list .)


state 14

    (6) assignment_list -> statement_assignment .
    (7) assignment_list -> statement_assignment . assignment_list
    (6) assignment_list -> . statement_assignment
    (7) assignment_list -> . statement_assignment assignment_list
    (42) statement_assignment -> . IDENT ASSIGN expression SEMICOL

    FUNCTION        reduce using rule 6 (assignment_list -> statement_assignment .)
    IDENT           shift and go to state 15

    statement_assignment           shift and go to state 14
    assignment_list                shift and go to state 20

state 15

    (42) statement_assignment -> IDENT . ASSIGN expression SEMICOL

    ASSIGN          shift and go to state 21


state 16

    (11) variables_declaration_list -> TYPE variables_list . SEMICOL
    (12) variables_declaration_list -> TYPE variables_list . SEMICOL variables_declaration_list

    SEMICOL         shift and go to state 22


state 17

    (17) variables_list -> IDENT .
    (18) variables_list -> IDENT . COMMA variables_list

    SEMICOL         reduce using rule 17 (variables_list -> IDENT .)
    COMMA           shift and go to state 23


state 18

    (3) global_body -> optional_variables_declaration_list optional_assignment_list function . optional_functions_declaration_list optional_class_declaration_list
    (25) optional_functions_declaration_list -> . empty
    (26) optional_functions_declaration_list -> . functions_declaration_list
    (2) empty -> .
    (27) functions_declaration_list -> . function
    (28) functions_declaration_list -> . function functions_declaration_list
    (29) function -> . FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL

    CLASS           reduce using rule 2 (empty -> .)
    $end            reduce using rule 2 (empty -> .)
    FUNCTION        shift and go to state 19

    function                       shift and go to state 24
    optional_functions_declaration_list shift and go to state 25
    empty                          shift and go to state 26
    functions_declaration_list     shift and go to state 27

state 19

    (29) function -> FUNCTION . TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL
    (13) TYPE -> . INT
    (14) TYPE -> . FLOAT
    (15) TYPE -> . BOOL
    (16) TYPE -> . CHAR

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    TYPE                           shift and go to state 28

state 20

    (7) assignment_list -> statement_assignment assignment_list .

    FUNCTION        reduce using rule 7 (assignment_list -> statement_assignment assignment_list .)


state 21

    (42) statement_assignment -> IDENT ASSIGN . expression SEMICOL
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 30
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 22

    (11) variables_declaration_list -> TYPE variables_list SEMICOL .
    (12) variables_declaration_list -> TYPE variables_list SEMICOL . variables_declaration_list
    (11) variables_declaration_list -> . TYPE variables_list SEMICOL
    (12) variables_declaration_list -> . TYPE variables_list SEMICOL variables_declaration_list
    (13) TYPE -> . INT
    (14) TYPE -> . FLOAT
    (15) TYPE -> . BOOL
    (16) TYPE -> . CHAR

    IDENT           reduce using rule 11 (variables_declaration_list -> TYPE variables_list SEMICOL .)
    FUNCTION        reduce using rule 11 (variables_declaration_list -> TYPE variables_list SEMICOL .)
    RCURL           reduce using rule 11 (variables_declaration_list -> TYPE variables_list SEMICOL .)
    RETURN          reduce using rule 11 (variables_declaration_list -> TYPE variables_list SEMICOL .)
    PRINT           reduce using rule 11 (variables_declaration_list -> TYPE variables_list SEMICOL .)
    IF              reduce using rule 11 (variables_declaration_list -> TYPE variables_list SEMICOL .)
    WHILE           reduce using rule 11 (variables_declaration_list -> TYPE variables_list SEMICOL .)
    LCURL           reduce using rule 11 (variables_declaration_list -> TYPE variables_list SEMICOL .)
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    TYPE                           shift and go to state 6
    variables_declaration_list     shift and go to state 43

state 23

    (18) variables_list -> IDENT COMMA . variables_list
    (17) variables_list -> . IDENT
    (18) variables_list -> . IDENT COMMA variables_list

    IDENT           shift and go to state 17

    variables_list                 shift and go to state 44

state 24

    (27) functions_declaration_list -> function .
    (28) functions_declaration_list -> function . functions_declaration_list
    (27) functions_declaration_list -> . function
    (28) functions_declaration_list -> . function functions_declaration_list
    (29) function -> . FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL

    CLASS           reduce using rule 27 (functions_declaration_list -> function .)
    $end            reduce using rule 27 (functions_declaration_list -> function .)
    RCURL           reduce using rule 27 (functions_declaration_list -> function .)
    RETURN          reduce using rule 27 (functions_declaration_list -> function .)
    PRINT           reduce using rule 27 (functions_declaration_list -> function .)
    IDENT           reduce using rule 27 (functions_declaration_list -> function .)
    IF              reduce using rule 27 (functions_declaration_list -> function .)
    WHILE           reduce using rule 27 (functions_declaration_list -> function .)
    LCURL           reduce using rule 27 (functions_declaration_list -> function .)
    FUNCTION        shift and go to state 19

    function                       shift and go to state 24
    functions_declaration_list     shift and go to state 45

state 25

    (3) global_body -> optional_variables_declaration_list optional_assignment_list function optional_functions_declaration_list . optional_class_declaration_list
    (19) optional_class_declaration_list -> . empty
    (20) optional_class_declaration_list -> . class_declaration_list
    (2) empty -> .
    (21) class_declaration_list -> . class_declaration
    (22) class_declaration_list -> . class_declaration class_declaration_list
    (23) class_declaration -> . CLASS IDENT optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list RCURL

    $end            reduce using rule 2 (empty -> .)
    CLASS           shift and go to state 50

    optional_class_declaration_list shift and go to state 46
    empty                          shift and go to state 47
    class_declaration_list         shift and go to state 48
    class_declaration              shift and go to state 49

state 26

    (25) optional_functions_declaration_list -> empty .

    CLASS           reduce using rule 25 (optional_functions_declaration_list -> empty .)
    $end            reduce using rule 25 (optional_functions_declaration_list -> empty .)
    RCURL           reduce using rule 25 (optional_functions_declaration_list -> empty .)
    RETURN          reduce using rule 25 (optional_functions_declaration_list -> empty .)
    PRINT           reduce using rule 25 (optional_functions_declaration_list -> empty .)
    IDENT           reduce using rule 25 (optional_functions_declaration_list -> empty .)
    IF              reduce using rule 25 (optional_functions_declaration_list -> empty .)
    WHILE           reduce using rule 25 (optional_functions_declaration_list -> empty .)
    LCURL           reduce using rule 25 (optional_functions_declaration_list -> empty .)


state 27

    (26) optional_functions_declaration_list -> functions_declaration_list .

    CLASS           reduce using rule 26 (optional_functions_declaration_list -> functions_declaration_list .)
    $end            reduce using rule 26 (optional_functions_declaration_list -> functions_declaration_list .)
    RCURL           reduce using rule 26 (optional_functions_declaration_list -> functions_declaration_list .)
    RETURN          reduce using rule 26 (optional_functions_declaration_list -> functions_declaration_list .)
    PRINT           reduce using rule 26 (optional_functions_declaration_list -> functions_declaration_list .)
    IDENT           reduce using rule 26 (optional_functions_declaration_list -> functions_declaration_list .)
    IF              reduce using rule 26 (optional_functions_declaration_list -> functions_declaration_list .)
    WHILE           reduce using rule 26 (optional_functions_declaration_list -> functions_declaration_list .)
    LCURL           reduce using rule 26 (optional_functions_declaration_list -> functions_declaration_list .)


state 28

    (29) function -> FUNCTION TYPE . IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL

    IDENT           shift and go to state 51


state 29

    (62) expression_identifier -> IDENT .
    (63) expression_call -> IDENT . LPAREN optional_expression_list RPAREN
    (64) expression_attribute -> IDENT . DOT IDENT

    SEMICOL         reduce using rule 62 (expression_identifier -> IDENT .)
    PLUS            reduce using rule 62 (expression_identifier -> IDENT .)
    MINUS           reduce using rule 62 (expression_identifier -> IDENT .)
    TIMES           reduce using rule 62 (expression_identifier -> IDENT .)
    DIVIDE          reduce using rule 62 (expression_identifier -> IDENT .)
    EQ              reduce using rule 62 (expression_identifier -> IDENT .)
    NEQ             reduce using rule 62 (expression_identifier -> IDENT .)
    LT              reduce using rule 62 (expression_identifier -> IDENT .)
    GT              reduce using rule 62 (expression_identifier -> IDENT .)
    LTE             reduce using rule 62 (expression_identifier -> IDENT .)
    GTE             reduce using rule 62 (expression_identifier -> IDENT .)
    COMMA           reduce using rule 62 (expression_identifier -> IDENT .)
    RPAREN          reduce using rule 62 (expression_identifier -> IDENT .)
    THEN            reduce using rule 62 (expression_identifier -> IDENT .)
    DO              reduce using rule 62 (expression_identifier -> IDENT .)
    LPAREN          shift and go to state 52
    DOT             shift and go to state 53


state 30

    (42) statement_assignment -> IDENT ASSIGN expression . SEMICOL
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         shift and go to state 54
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64


state 31

    (50) expression -> expression_integer .

    SEMICOL         reduce using rule 50 (expression -> expression_integer .)
    PLUS            reduce using rule 50 (expression -> expression_integer .)
    MINUS           reduce using rule 50 (expression -> expression_integer .)
    TIMES           reduce using rule 50 (expression -> expression_integer .)
    DIVIDE          reduce using rule 50 (expression -> expression_integer .)
    EQ              reduce using rule 50 (expression -> expression_integer .)
    NEQ             reduce using rule 50 (expression -> expression_integer .)
    LT              reduce using rule 50 (expression -> expression_integer .)
    GT              reduce using rule 50 (expression -> expression_integer .)
    LTE             reduce using rule 50 (expression -> expression_integer .)
    GTE             reduce using rule 50 (expression -> expression_integer .)
    COMMA           reduce using rule 50 (expression -> expression_integer .)
    RPAREN          reduce using rule 50 (expression -> expression_integer .)
    THEN            reduce using rule 50 (expression -> expression_integer .)
    DO              reduce using rule 50 (expression -> expression_integer .)


state 32

    (51) expression -> expression_float .

    SEMICOL         reduce using rule 51 (expression -> expression_float .)
    PLUS            reduce using rule 51 (expression -> expression_float .)
    MINUS           reduce using rule 51 (expression -> expression_float .)
    TIMES           reduce using rule 51 (expression -> expression_float .)
    DIVIDE          reduce using rule 51 (expression -> expression_float .)
    EQ              reduce using rule 51 (expression -> expression_float .)
    NEQ             reduce using rule 51 (expression -> expression_float .)
    LT              reduce using rule 51 (expression -> expression_float .)
    GT              reduce using rule 51 (expression -> expression_float .)
    LTE             reduce using rule 51 (expression -> expression_float .)
    GTE             reduce using rule 51 (expression -> expression_float .)
    COMMA           reduce using rule 51 (expression -> expression_float .)
    RPAREN          reduce using rule 51 (expression -> expression_float .)
    THEN            reduce using rule 51 (expression -> expression_float .)
    DO              reduce using rule 51 (expression -> expression_float .)


state 33

    (52) expression -> expression_bool .

    SEMICOL         reduce using rule 52 (expression -> expression_bool .)
    PLUS            reduce using rule 52 (expression -> expression_bool .)
    MINUS           reduce using rule 52 (expression -> expression_bool .)
    TIMES           reduce using rule 52 (expression -> expression_bool .)
    DIVIDE          reduce using rule 52 (expression -> expression_bool .)
    EQ              reduce using rule 52 (expression -> expression_bool .)
    NEQ             reduce using rule 52 (expression -> expression_bool .)
    LT              reduce using rule 52 (expression -> expression_bool .)
    GT              reduce using rule 52 (expression -> expression_bool .)
    LTE             reduce using rule 52 (expression -> expression_bool .)
    GTE             reduce using rule 52 (expression -> expression_bool .)
    COMMA           reduce using rule 52 (expression -> expression_bool .)
    RPAREN          reduce using rule 52 (expression -> expression_bool .)
    THEN            reduce using rule 52 (expression -> expression_bool .)
    DO              reduce using rule 52 (expression -> expression_bool .)


state 34

    (53) expression -> expression_char .

    SEMICOL         reduce using rule 53 (expression -> expression_char .)
    PLUS            reduce using rule 53 (expression -> expression_char .)
    MINUS           reduce using rule 53 (expression -> expression_char .)
    TIMES           reduce using rule 53 (expression -> expression_char .)
    DIVIDE          reduce using rule 53 (expression -> expression_char .)
    EQ              reduce using rule 53 (expression -> expression_char .)
    NEQ             reduce using rule 53 (expression -> expression_char .)
    LT              reduce using rule 53 (expression -> expression_char .)
    GT              reduce using rule 53 (expression -> expression_char .)
    LTE             reduce using rule 53 (expression -> expression_char .)
    GTE             reduce using rule 53 (expression -> expression_char .)
    COMMA           reduce using rule 53 (expression -> expression_char .)
    RPAREN          reduce using rule 53 (expression -> expression_char .)
    THEN            reduce using rule 53 (expression -> expression_char .)
    DO              reduce using rule 53 (expression -> expression_char .)


state 35

    (54) expression -> expression_identifier .

    SEMICOL         reduce using rule 54 (expression -> expression_identifier .)
    PLUS            reduce using rule 54 (expression -> expression_identifier .)
    MINUS           reduce using rule 54 (expression -> expression_identifier .)
    TIMES           reduce using rule 54 (expression -> expression_identifier .)
    DIVIDE          reduce using rule 54 (expression -> expression_identifier .)
    EQ              reduce using rule 54 (expression -> expression_identifier .)
    NEQ             reduce using rule 54 (expression -> expression_identifier .)
    LT              reduce using rule 54 (expression -> expression_identifier .)
    GT              reduce using rule 54 (expression -> expression_identifier .)
    LTE             reduce using rule 54 (expression -> expression_identifier .)
    GTE             reduce using rule 54 (expression -> expression_identifier .)
    COMMA           reduce using rule 54 (expression -> expression_identifier .)
    RPAREN          reduce using rule 54 (expression -> expression_identifier .)
    THEN            reduce using rule 54 (expression -> expression_identifier .)
    DO              reduce using rule 54 (expression -> expression_identifier .)


state 36

    (55) expression -> expression_call .

    SEMICOL         reduce using rule 55 (expression -> expression_call .)
    PLUS            reduce using rule 55 (expression -> expression_call .)
    MINUS           reduce using rule 55 (expression -> expression_call .)
    TIMES           reduce using rule 55 (expression -> expression_call .)
    DIVIDE          reduce using rule 55 (expression -> expression_call .)
    EQ              reduce using rule 55 (expression -> expression_call .)
    NEQ             reduce using rule 55 (expression -> expression_call .)
    LT              reduce using rule 55 (expression -> expression_call .)
    GT              reduce using rule 55 (expression -> expression_call .)
    LTE             reduce using rule 55 (expression -> expression_call .)
    GTE             reduce using rule 55 (expression -> expression_call .)
    COMMA           reduce using rule 55 (expression -> expression_call .)
    RPAREN          reduce using rule 55 (expression -> expression_call .)
    THEN            reduce using rule 55 (expression -> expression_call .)
    DO              reduce using rule 55 (expression -> expression_call .)


state 37

    (56) expression -> expression_binop .

    SEMICOL         reduce using rule 56 (expression -> expression_binop .)
    PLUS            reduce using rule 56 (expression -> expression_binop .)
    MINUS           reduce using rule 56 (expression -> expression_binop .)
    TIMES           reduce using rule 56 (expression -> expression_binop .)
    DIVIDE          reduce using rule 56 (expression -> expression_binop .)
    EQ              reduce using rule 56 (expression -> expression_binop .)
    NEQ             reduce using rule 56 (expression -> expression_binop .)
    LT              reduce using rule 56 (expression -> expression_binop .)
    GT              reduce using rule 56 (expression -> expression_binop .)
    LTE             reduce using rule 56 (expression -> expression_binop .)
    GTE             reduce using rule 56 (expression -> expression_binop .)
    COMMA           reduce using rule 56 (expression -> expression_binop .)
    RPAREN          reduce using rule 56 (expression -> expression_binop .)
    THEN            reduce using rule 56 (expression -> expression_binop .)
    DO              reduce using rule 56 (expression -> expression_binop .)


state 38

    (57) expression -> expression_attribute .

    SEMICOL         reduce using rule 57 (expression -> expression_attribute .)
    PLUS            reduce using rule 57 (expression -> expression_attribute .)
    MINUS           reduce using rule 57 (expression -> expression_attribute .)
    TIMES           reduce using rule 57 (expression -> expression_attribute .)
    DIVIDE          reduce using rule 57 (expression -> expression_attribute .)
    EQ              reduce using rule 57 (expression -> expression_attribute .)
    NEQ             reduce using rule 57 (expression -> expression_attribute .)
    LT              reduce using rule 57 (expression -> expression_attribute .)
    GT              reduce using rule 57 (expression -> expression_attribute .)
    LTE             reduce using rule 57 (expression -> expression_attribute .)
    GTE             reduce using rule 57 (expression -> expression_attribute .)
    COMMA           reduce using rule 57 (expression -> expression_attribute .)
    RPAREN          reduce using rule 57 (expression -> expression_attribute .)
    THEN            reduce using rule 57 (expression -> expression_attribute .)
    DO              reduce using rule 57 (expression -> expression_attribute .)


state 39

    (58) expression_integer -> INT .

    SEMICOL         reduce using rule 58 (expression_integer -> INT .)
    PLUS            reduce using rule 58 (expression_integer -> INT .)
    MINUS           reduce using rule 58 (expression_integer -> INT .)
    TIMES           reduce using rule 58 (expression_integer -> INT .)
    DIVIDE          reduce using rule 58 (expression_integer -> INT .)
    EQ              reduce using rule 58 (expression_integer -> INT .)
    NEQ             reduce using rule 58 (expression_integer -> INT .)
    LT              reduce using rule 58 (expression_integer -> INT .)
    GT              reduce using rule 58 (expression_integer -> INT .)
    LTE             reduce using rule 58 (expression_integer -> INT .)
    GTE             reduce using rule 58 (expression_integer -> INT .)
    COMMA           reduce using rule 58 (expression_integer -> INT .)
    RPAREN          reduce using rule 58 (expression_integer -> INT .)
    THEN            reduce using rule 58 (expression_integer -> INT .)
    DO              reduce using rule 58 (expression_integer -> INT .)


state 40

    (59) expression_float -> FLOAT .

    SEMICOL         reduce using rule 59 (expression_float -> FLOAT .)
    PLUS            reduce using rule 59 (expression_float -> FLOAT .)
    MINUS           reduce using rule 59 (expression_float -> FLOAT .)
    TIMES           reduce using rule 59 (expression_float -> FLOAT .)
    DIVIDE          reduce using rule 59 (expression_float -> FLOAT .)
    EQ              reduce using rule 59 (expression_float -> FLOAT .)
    NEQ             reduce using rule 59 (expression_float -> FLOAT .)
    LT              reduce using rule 59 (expression_float -> FLOAT .)
    GT              reduce using rule 59 (expression_float -> FLOAT .)
    LTE             reduce using rule 59 (expression_float -> FLOAT .)
    GTE             reduce using rule 59 (expression_float -> FLOAT .)
    COMMA           reduce using rule 59 (expression_float -> FLOAT .)
    RPAREN          reduce using rule 59 (expression_float -> FLOAT .)
    THEN            reduce using rule 59 (expression_float -> FLOAT .)
    DO              reduce using rule 59 (expression_float -> FLOAT .)


state 41

    (60) expression_bool -> BOOL .

    SEMICOL         reduce using rule 60 (expression_bool -> BOOL .)
    PLUS            reduce using rule 60 (expression_bool -> BOOL .)
    MINUS           reduce using rule 60 (expression_bool -> BOOL .)
    TIMES           reduce using rule 60 (expression_bool -> BOOL .)
    DIVIDE          reduce using rule 60 (expression_bool -> BOOL .)
    EQ              reduce using rule 60 (expression_bool -> BOOL .)
    NEQ             reduce using rule 60 (expression_bool -> BOOL .)
    LT              reduce using rule 60 (expression_bool -> BOOL .)
    GT              reduce using rule 60 (expression_bool -> BOOL .)
    LTE             reduce using rule 60 (expression_bool -> BOOL .)
    GTE             reduce using rule 60 (expression_bool -> BOOL .)
    COMMA           reduce using rule 60 (expression_bool -> BOOL .)
    RPAREN          reduce using rule 60 (expression_bool -> BOOL .)
    THEN            reduce using rule 60 (expression_bool -> BOOL .)
    DO              reduce using rule 60 (expression_bool -> BOOL .)


state 42

    (61) expression_char -> CHAR .

    SEMICOL         reduce using rule 61 (expression_char -> CHAR .)
    PLUS            reduce using rule 61 (expression_char -> CHAR .)
    MINUS           reduce using rule 61 (expression_char -> CHAR .)
    TIMES           reduce using rule 61 (expression_char -> CHAR .)
    DIVIDE          reduce using rule 61 (expression_char -> CHAR .)
    EQ              reduce using rule 61 (expression_char -> CHAR .)
    NEQ             reduce using rule 61 (expression_char -> CHAR .)
    LT              reduce using rule 61 (expression_char -> CHAR .)
    GT              reduce using rule 61 (expression_char -> CHAR .)
    LTE             reduce using rule 61 (expression_char -> CHAR .)
    GTE             reduce using rule 61 (expression_char -> CHAR .)
    COMMA           reduce using rule 61 (expression_char -> CHAR .)
    RPAREN          reduce using rule 61 (expression_char -> CHAR .)
    THEN            reduce using rule 61 (expression_char -> CHAR .)
    DO              reduce using rule 61 (expression_char -> CHAR .)


state 43

    (12) variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list .

    IDENT           reduce using rule 12 (variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list .)
    FUNCTION        reduce using rule 12 (variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list .)
    RCURL           reduce using rule 12 (variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list .)
    RETURN          reduce using rule 12 (variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list .)
    PRINT           reduce using rule 12 (variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list .)
    IF              reduce using rule 12 (variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list .)
    WHILE           reduce using rule 12 (variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list .)
    LCURL           reduce using rule 12 (variables_declaration_list -> TYPE variables_list SEMICOL variables_declaration_list .)


state 44

    (18) variables_list -> IDENT COMMA variables_list .

    SEMICOL         reduce using rule 18 (variables_list -> IDENT COMMA variables_list .)


state 45

    (28) functions_declaration_list -> function functions_declaration_list .

    CLASS           reduce using rule 28 (functions_declaration_list -> function functions_declaration_list .)
    $end            reduce using rule 28 (functions_declaration_list -> function functions_declaration_list .)
    RCURL           reduce using rule 28 (functions_declaration_list -> function functions_declaration_list .)
    RETURN          reduce using rule 28 (functions_declaration_list -> function functions_declaration_list .)
    PRINT           reduce using rule 28 (functions_declaration_list -> function functions_declaration_list .)
    IDENT           reduce using rule 28 (functions_declaration_list -> function functions_declaration_list .)
    IF              reduce using rule 28 (functions_declaration_list -> function functions_declaration_list .)
    WHILE           reduce using rule 28 (functions_declaration_list -> function functions_declaration_list .)
    LCURL           reduce using rule 28 (functions_declaration_list -> function functions_declaration_list .)


state 46

    (3) global_body -> optional_variables_declaration_list optional_assignment_list function optional_functions_declaration_list optional_class_declaration_list .

    $end            reduce using rule 3 (global_body -> optional_variables_declaration_list optional_assignment_list function optional_functions_declaration_list optional_class_declaration_list .)


state 47

    (19) optional_class_declaration_list -> empty .

    $end            reduce using rule 19 (optional_class_declaration_list -> empty .)


state 48

    (20) optional_class_declaration_list -> class_declaration_list .

    $end            reduce using rule 20 (optional_class_declaration_list -> class_declaration_list .)


state 49

    (21) class_declaration_list -> class_declaration .
    (22) class_declaration_list -> class_declaration . class_declaration_list
    (21) class_declaration_list -> . class_declaration
    (22) class_declaration_list -> . class_declaration class_declaration_list
    (23) class_declaration -> . CLASS IDENT optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list RCURL

    $end            reduce using rule 21 (class_declaration_list -> class_declaration .)
    CLASS           shift and go to state 50

    class_declaration              shift and go to state 49
    class_declaration_list         shift and go to state 65

state 50

    (23) class_declaration -> CLASS . IDENT optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list RCURL

    IDENT           shift and go to state 66


state 51

    (29) function -> FUNCTION TYPE IDENT . LPAREN optional_parameter_list RPAREN LCURL body RCURL

    LPAREN          shift and go to state 67


state 52

    (63) expression_call -> IDENT LPAREN . optional_expression_list RPAREN
    (75) optional_expression_list -> . empty
    (76) optional_expression_list -> . expression_list
    (2) empty -> .
    (77) expression_list -> . expression
    (78) expression_list -> . expression COMMA expression_list
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    RPAREN          reduce using rule 2 (empty -> .)
    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    optional_expression_list       shift and go to state 68
    empty                          shift and go to state 69
    expression_list                shift and go to state 70
    expression                     shift and go to state 71
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 53

    (64) expression_attribute -> IDENT DOT . IDENT

    IDENT           shift and go to state 72


state 54

    (42) statement_assignment -> IDENT ASSIGN expression SEMICOL .

    IDENT           reduce using rule 42 (statement_assignment -> IDENT ASSIGN expression SEMICOL .)
    FUNCTION        reduce using rule 42 (statement_assignment -> IDENT ASSIGN expression SEMICOL .)
    RETURN          reduce using rule 42 (statement_assignment -> IDENT ASSIGN expression SEMICOL .)
    PRINT           reduce using rule 42 (statement_assignment -> IDENT ASSIGN expression SEMICOL .)
    IF              reduce using rule 42 (statement_assignment -> IDENT ASSIGN expression SEMICOL .)
    WHILE           reduce using rule 42 (statement_assignment -> IDENT ASSIGN expression SEMICOL .)
    LCURL           reduce using rule 42 (statement_assignment -> IDENT ASSIGN expression SEMICOL .)
    RCURL           reduce using rule 42 (statement_assignment -> IDENT ASSIGN expression SEMICOL .)
    ELSE            reduce using rule 42 (statement_assignment -> IDENT ASSIGN expression SEMICOL .)


state 55

    (65) expression_binop -> expression PLUS . expression
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 73
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 56

    (66) expression_binop -> expression MINUS . expression
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 74
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 57

    (67) expression_binop -> expression TIMES . expression
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 75
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 58

    (68) expression_binop -> expression DIVIDE . expression
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 76
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 59

    (69) expression_binop -> expression EQ . expression
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 77
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 60

    (70) expression_binop -> expression NEQ . expression
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 78
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 61

    (71) expression_binop -> expression LT . expression
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 79
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 62

    (72) expression_binop -> expression GT . expression
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 80
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 63

    (73) expression_binop -> expression LTE . expression
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 81
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 64

    (74) expression_binop -> expression GTE . expression
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 82
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 65

    (22) class_declaration_list -> class_declaration class_declaration_list .

    $end            reduce using rule 22 (class_declaration_list -> class_declaration class_declaration_list .)


state 66

    (23) class_declaration -> CLASS IDENT . optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list RCURL
    (24) optional_extends -> . empty
    (2) empty -> .

    LCURL           reduce using rule 2 (empty -> .)

    optional_extends               shift and go to state 83
    empty                          shift and go to state 84

state 67

    (29) function -> FUNCTION TYPE IDENT LPAREN . optional_parameter_list RPAREN LCURL body RCURL
    (30) optional_parameter_list -> . empty
    (31) optional_parameter_list -> . parameter_list
    (2) empty -> .
    (32) parameter_list -> . TYPE IDENT
    (33) parameter_list -> . TYPE IDENT COMMA parameter_list
    (13) TYPE -> . INT
    (14) TYPE -> . FLOAT
    (15) TYPE -> . BOOL
    (16) TYPE -> . CHAR

    RPAREN          reduce using rule 2 (empty -> .)
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    TYPE                           shift and go to state 85
    optional_parameter_list        shift and go to state 86
    empty                          shift and go to state 87
    parameter_list                 shift and go to state 88

state 68

    (63) expression_call -> IDENT LPAREN optional_expression_list . RPAREN

    RPAREN          shift and go to state 89


state 69

    (75) optional_expression_list -> empty .

    RPAREN          reduce using rule 75 (optional_expression_list -> empty .)


state 70

    (76) optional_expression_list -> expression_list .

    RPAREN          reduce using rule 76 (optional_expression_list -> expression_list .)


state 71

    (77) expression_list -> expression .
    (78) expression_list -> expression . COMMA expression_list
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    RPAREN          reduce using rule 77 (expression_list -> expression .)
    COMMA           shift and go to state 90
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64


state 72

    (64) expression_attribute -> IDENT DOT IDENT .

    SEMICOL         reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    PLUS            reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    MINUS           reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    TIMES           reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    DIVIDE          reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    EQ              reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    NEQ             reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    LT              reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    GT              reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    LTE             reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    GTE             reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    COMMA           reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    RPAREN          reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    THEN            reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)
    DO              reduce using rule 64 (expression_attribute -> IDENT DOT IDENT .)


state 73

    (65) expression_binop -> expression PLUS expression .
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         reduce using rule 65 (expression_binop -> expression PLUS expression .)
    PLUS            reduce using rule 65 (expression_binop -> expression PLUS expression .)
    MINUS           reduce using rule 65 (expression_binop -> expression PLUS expression .)
    EQ              reduce using rule 65 (expression_binop -> expression PLUS expression .)
    NEQ             reduce using rule 65 (expression_binop -> expression PLUS expression .)
    LT              reduce using rule 65 (expression_binop -> expression PLUS expression .)
    GT              reduce using rule 65 (expression_binop -> expression PLUS expression .)
    LTE             reduce using rule 65 (expression_binop -> expression PLUS expression .)
    GTE             reduce using rule 65 (expression_binop -> expression PLUS expression .)
    COMMA           reduce using rule 65 (expression_binop -> expression PLUS expression .)
    RPAREN          reduce using rule 65 (expression_binop -> expression PLUS expression .)
    THEN            reduce using rule 65 (expression_binop -> expression PLUS expression .)
    DO              reduce using rule 65 (expression_binop -> expression PLUS expression .)
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58

  ! TIMES           [ reduce using rule 65 (expression_binop -> expression PLUS expression .) ]
  ! DIVIDE          [ reduce using rule 65 (expression_binop -> expression PLUS expression .) ]
  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LTE             [ shift and go to state 63 ]
  ! GTE             [ shift and go to state 64 ]


state 74

    (66) expression_binop -> expression MINUS expression .
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         reduce using rule 66 (expression_binop -> expression MINUS expression .)
    PLUS            reduce using rule 66 (expression_binop -> expression MINUS expression .)
    MINUS           reduce using rule 66 (expression_binop -> expression MINUS expression .)
    EQ              reduce using rule 66 (expression_binop -> expression MINUS expression .)
    NEQ             reduce using rule 66 (expression_binop -> expression MINUS expression .)
    LT              reduce using rule 66 (expression_binop -> expression MINUS expression .)
    GT              reduce using rule 66 (expression_binop -> expression MINUS expression .)
    LTE             reduce using rule 66 (expression_binop -> expression MINUS expression .)
    GTE             reduce using rule 66 (expression_binop -> expression MINUS expression .)
    COMMA           reduce using rule 66 (expression_binop -> expression MINUS expression .)
    RPAREN          reduce using rule 66 (expression_binop -> expression MINUS expression .)
    THEN            reduce using rule 66 (expression_binop -> expression MINUS expression .)
    DO              reduce using rule 66 (expression_binop -> expression MINUS expression .)
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58

  ! TIMES           [ reduce using rule 66 (expression_binop -> expression MINUS expression .) ]
  ! DIVIDE          [ reduce using rule 66 (expression_binop -> expression MINUS expression .) ]
  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LTE             [ shift and go to state 63 ]
  ! GTE             [ shift and go to state 64 ]


state 75

    (67) expression_binop -> expression TIMES expression .
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         reduce using rule 67 (expression_binop -> expression TIMES expression .)
    PLUS            reduce using rule 67 (expression_binop -> expression TIMES expression .)
    MINUS           reduce using rule 67 (expression_binop -> expression TIMES expression .)
    TIMES           reduce using rule 67 (expression_binop -> expression TIMES expression .)
    DIVIDE          reduce using rule 67 (expression_binop -> expression TIMES expression .)
    EQ              reduce using rule 67 (expression_binop -> expression TIMES expression .)
    NEQ             reduce using rule 67 (expression_binop -> expression TIMES expression .)
    LT              reduce using rule 67 (expression_binop -> expression TIMES expression .)
    GT              reduce using rule 67 (expression_binop -> expression TIMES expression .)
    LTE             reduce using rule 67 (expression_binop -> expression TIMES expression .)
    GTE             reduce using rule 67 (expression_binop -> expression TIMES expression .)
    COMMA           reduce using rule 67 (expression_binop -> expression TIMES expression .)
    RPAREN          reduce using rule 67 (expression_binop -> expression TIMES expression .)
    THEN            reduce using rule 67 (expression_binop -> expression TIMES expression .)
    DO              reduce using rule 67 (expression_binop -> expression TIMES expression .)

  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]
  ! TIMES           [ shift and go to state 57 ]
  ! DIVIDE          [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LTE             [ shift and go to state 63 ]
  ! GTE             [ shift and go to state 64 ]


state 76

    (68) expression_binop -> expression DIVIDE expression .
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    PLUS            reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    MINUS           reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    TIMES           reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    DIVIDE          reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    EQ              reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    NEQ             reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    LT              reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    GT              reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    LTE             reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    GTE             reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    COMMA           reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    RPAREN          reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    THEN            reduce using rule 68 (expression_binop -> expression DIVIDE expression .)
    DO              reduce using rule 68 (expression_binop -> expression DIVIDE expression .)

  ! PLUS            [ shift and go to state 55 ]
  ! MINUS           [ shift and go to state 56 ]
  ! TIMES           [ shift and go to state 57 ]
  ! DIVIDE          [ shift and go to state 58 ]
  ! EQ              [ shift and go to state 59 ]
  ! NEQ             [ shift and go to state 60 ]
  ! LT              [ shift and go to state 61 ]
  ! GT              [ shift and go to state 62 ]
  ! LTE             [ shift and go to state 63 ]
  ! GTE             [ shift and go to state 64 ]


state 77

    (69) expression_binop -> expression EQ expression .
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         reduce using rule 69 (expression_binop -> expression EQ expression .)
    COMMA           reduce using rule 69 (expression_binop -> expression EQ expression .)
    RPAREN          reduce using rule 69 (expression_binop -> expression EQ expression .)
    THEN            reduce using rule 69 (expression_binop -> expression EQ expression .)
    DO              reduce using rule 69 (expression_binop -> expression EQ expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64

  ! PLUS            [ reduce using rule 69 (expression_binop -> expression EQ expression .) ]
  ! MINUS           [ reduce using rule 69 (expression_binop -> expression EQ expression .) ]
  ! TIMES           [ reduce using rule 69 (expression_binop -> expression EQ expression .) ]
  ! DIVIDE          [ reduce using rule 69 (expression_binop -> expression EQ expression .) ]
  ! EQ              [ reduce using rule 69 (expression_binop -> expression EQ expression .) ]
  ! NEQ             [ reduce using rule 69 (expression_binop -> expression EQ expression .) ]
  ! LT              [ reduce using rule 69 (expression_binop -> expression EQ expression .) ]
  ! GT              [ reduce using rule 69 (expression_binop -> expression EQ expression .) ]
  ! LTE             [ reduce using rule 69 (expression_binop -> expression EQ expression .) ]
  ! GTE             [ reduce using rule 69 (expression_binop -> expression EQ expression .) ]


state 78

    (70) expression_binop -> expression NEQ expression .
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         reduce using rule 70 (expression_binop -> expression NEQ expression .)
    COMMA           reduce using rule 70 (expression_binop -> expression NEQ expression .)
    RPAREN          reduce using rule 70 (expression_binop -> expression NEQ expression .)
    THEN            reduce using rule 70 (expression_binop -> expression NEQ expression .)
    DO              reduce using rule 70 (expression_binop -> expression NEQ expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64

  ! PLUS            [ reduce using rule 70 (expression_binop -> expression NEQ expression .) ]
  ! MINUS           [ reduce using rule 70 (expression_binop -> expression NEQ expression .) ]
  ! TIMES           [ reduce using rule 70 (expression_binop -> expression NEQ expression .) ]
  ! DIVIDE          [ reduce using rule 70 (expression_binop -> expression NEQ expression .) ]
  ! EQ              [ reduce using rule 70 (expression_binop -> expression NEQ expression .) ]
  ! NEQ             [ reduce using rule 70 (expression_binop -> expression NEQ expression .) ]
  ! LT              [ reduce using rule 70 (expression_binop -> expression NEQ expression .) ]
  ! GT              [ reduce using rule 70 (expression_binop -> expression NEQ expression .) ]
  ! LTE             [ reduce using rule 70 (expression_binop -> expression NEQ expression .) ]
  ! GTE             [ reduce using rule 70 (expression_binop -> expression NEQ expression .) ]


state 79

    (71) expression_binop -> expression LT expression .
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         reduce using rule 71 (expression_binop -> expression LT expression .)
    COMMA           reduce using rule 71 (expression_binop -> expression LT expression .)
    RPAREN          reduce using rule 71 (expression_binop -> expression LT expression .)
    THEN            reduce using rule 71 (expression_binop -> expression LT expression .)
    DO              reduce using rule 71 (expression_binop -> expression LT expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64

  ! PLUS            [ reduce using rule 71 (expression_binop -> expression LT expression .) ]
  ! MINUS           [ reduce using rule 71 (expression_binop -> expression LT expression .) ]
  ! TIMES           [ reduce using rule 71 (expression_binop -> expression LT expression .) ]
  ! DIVIDE          [ reduce using rule 71 (expression_binop -> expression LT expression .) ]
  ! EQ              [ reduce using rule 71 (expression_binop -> expression LT expression .) ]
  ! NEQ             [ reduce using rule 71 (expression_binop -> expression LT expression .) ]
  ! LT              [ reduce using rule 71 (expression_binop -> expression LT expression .) ]
  ! GT              [ reduce using rule 71 (expression_binop -> expression LT expression .) ]
  ! LTE             [ reduce using rule 71 (expression_binop -> expression LT expression .) ]
  ! GTE             [ reduce using rule 71 (expression_binop -> expression LT expression .) ]


state 80

    (72) expression_binop -> expression GT expression .
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         reduce using rule 72 (expression_binop -> expression GT expression .)
    COMMA           reduce using rule 72 (expression_binop -> expression GT expression .)
    RPAREN          reduce using rule 72 (expression_binop -> expression GT expression .)
    THEN            reduce using rule 72 (expression_binop -> expression GT expression .)
    DO              reduce using rule 72 (expression_binop -> expression GT expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64

  ! PLUS            [ reduce using rule 72 (expression_binop -> expression GT expression .) ]
  ! MINUS           [ reduce using rule 72 (expression_binop -> expression GT expression .) ]
  ! TIMES           [ reduce using rule 72 (expression_binop -> expression GT expression .) ]
  ! DIVIDE          [ reduce using rule 72 (expression_binop -> expression GT expression .) ]
  ! EQ              [ reduce using rule 72 (expression_binop -> expression GT expression .) ]
  ! NEQ             [ reduce using rule 72 (expression_binop -> expression GT expression .) ]
  ! LT              [ reduce using rule 72 (expression_binop -> expression GT expression .) ]
  ! GT              [ reduce using rule 72 (expression_binop -> expression GT expression .) ]
  ! LTE             [ reduce using rule 72 (expression_binop -> expression GT expression .) ]
  ! GTE             [ reduce using rule 72 (expression_binop -> expression GT expression .) ]


state 81

    (73) expression_binop -> expression LTE expression .
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         reduce using rule 73 (expression_binop -> expression LTE expression .)
    COMMA           reduce using rule 73 (expression_binop -> expression LTE expression .)
    RPAREN          reduce using rule 73 (expression_binop -> expression LTE expression .)
    THEN            reduce using rule 73 (expression_binop -> expression LTE expression .)
    DO              reduce using rule 73 (expression_binop -> expression LTE expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64

  ! PLUS            [ reduce using rule 73 (expression_binop -> expression LTE expression .) ]
  ! MINUS           [ reduce using rule 73 (expression_binop -> expression LTE expression .) ]
  ! TIMES           [ reduce using rule 73 (expression_binop -> expression LTE expression .) ]
  ! DIVIDE          [ reduce using rule 73 (expression_binop -> expression LTE expression .) ]
  ! EQ              [ reduce using rule 73 (expression_binop -> expression LTE expression .) ]
  ! NEQ             [ reduce using rule 73 (expression_binop -> expression LTE expression .) ]
  ! LT              [ reduce using rule 73 (expression_binop -> expression LTE expression .) ]
  ! GT              [ reduce using rule 73 (expression_binop -> expression LTE expression .) ]
  ! LTE             [ reduce using rule 73 (expression_binop -> expression LTE expression .) ]
  ! GTE             [ reduce using rule 73 (expression_binop -> expression LTE expression .) ]


state 82

    (74) expression_binop -> expression GTE expression .
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         reduce using rule 74 (expression_binop -> expression GTE expression .)
    COMMA           reduce using rule 74 (expression_binop -> expression GTE expression .)
    RPAREN          reduce using rule 74 (expression_binop -> expression GTE expression .)
    THEN            reduce using rule 74 (expression_binop -> expression GTE expression .)
    DO              reduce using rule 74 (expression_binop -> expression GTE expression .)
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64

  ! PLUS            [ reduce using rule 74 (expression_binop -> expression GTE expression .) ]
  ! MINUS           [ reduce using rule 74 (expression_binop -> expression GTE expression .) ]
  ! TIMES           [ reduce using rule 74 (expression_binop -> expression GTE expression .) ]
  ! DIVIDE          [ reduce using rule 74 (expression_binop -> expression GTE expression .) ]
  ! EQ              [ reduce using rule 74 (expression_binop -> expression GTE expression .) ]
  ! NEQ             [ reduce using rule 74 (expression_binop -> expression GTE expression .) ]
  ! LT              [ reduce using rule 74 (expression_binop -> expression GTE expression .) ]
  ! GT              [ reduce using rule 74 (expression_binop -> expression GTE expression .) ]
  ! LTE             [ reduce using rule 74 (expression_binop -> expression GTE expression .) ]
  ! GTE             [ reduce using rule 74 (expression_binop -> expression GTE expression .) ]


state 83

    (23) class_declaration -> CLASS IDENT optional_extends . LCURL optional_variables_declaration_list optional_functions_declaration_list RCURL

    LCURL           shift and go to state 91


state 84

    (24) optional_extends -> empty .

    LCURL           reduce using rule 24 (optional_extends -> empty .)


state 85

    (32) parameter_list -> TYPE . IDENT
    (33) parameter_list -> TYPE . IDENT COMMA parameter_list

    IDENT           shift and go to state 92


state 86

    (29) function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list . RPAREN LCURL body RCURL

    RPAREN          shift and go to state 93


state 87

    (30) optional_parameter_list -> empty .

    RPAREN          reduce using rule 30 (optional_parameter_list -> empty .)


state 88

    (31) optional_parameter_list -> parameter_list .

    RPAREN          reduce using rule 31 (optional_parameter_list -> parameter_list .)


state 89

    (63) expression_call -> IDENT LPAREN optional_expression_list RPAREN .

    SEMICOL         reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    PLUS            reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    MINUS           reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    TIMES           reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    DIVIDE          reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    EQ              reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    NEQ             reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    LT              reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    GT              reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    LTE             reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    GTE             reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    COMMA           reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    RPAREN          reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    THEN            reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)
    DO              reduce using rule 63 (expression_call -> IDENT LPAREN optional_expression_list RPAREN .)


state 90

    (78) expression_list -> expression COMMA . expression_list
    (77) expression_list -> . expression
    (78) expression_list -> . expression COMMA expression_list
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 71
    expression_list                shift and go to state 94
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 91

    (23) class_declaration -> CLASS IDENT optional_extends LCURL . optional_variables_declaration_list optional_functions_declaration_list RCURL
    (9) optional_variables_declaration_list -> . empty
    (10) optional_variables_declaration_list -> . variables_declaration_list
    (2) empty -> .
    (11) variables_declaration_list -> . TYPE variables_list SEMICOL
    (12) variables_declaration_list -> . TYPE variables_list SEMICOL variables_declaration_list
    (13) TYPE -> . INT
    (14) TYPE -> . FLOAT
    (15) TYPE -> . BOOL
    (16) TYPE -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    RCURL           reduce using rule 2 (empty -> .)
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    optional_variables_declaration_list shift and go to state 95
    empty                          shift and go to state 4
    variables_declaration_list     shift and go to state 5
    TYPE                           shift and go to state 6

state 92

    (32) parameter_list -> TYPE IDENT .
    (33) parameter_list -> TYPE IDENT . COMMA parameter_list

    RPAREN          reduce using rule 32 (parameter_list -> TYPE IDENT .)
    COMMA           shift and go to state 96


state 93

    (29) function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN . LCURL body RCURL

    LCURL           shift and go to state 97


state 94

    (78) expression_list -> expression COMMA expression_list .

    RPAREN          reduce using rule 78 (expression_list -> expression COMMA expression_list .)


state 95

    (23) class_declaration -> CLASS IDENT optional_extends LCURL optional_variables_declaration_list . optional_functions_declaration_list RCURL
    (25) optional_functions_declaration_list -> . empty
    (26) optional_functions_declaration_list -> . functions_declaration_list
    (2) empty -> .
    (27) functions_declaration_list -> . function
    (28) functions_declaration_list -> . function functions_declaration_list
    (29) function -> . FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL

    RCURL           reduce using rule 2 (empty -> .)
    FUNCTION        shift and go to state 19

    optional_functions_declaration_list shift and go to state 98
    empty                          shift and go to state 26
    functions_declaration_list     shift and go to state 27
    function                       shift and go to state 24

state 96

    (33) parameter_list -> TYPE IDENT COMMA . parameter_list
    (32) parameter_list -> . TYPE IDENT
    (33) parameter_list -> . TYPE IDENT COMMA parameter_list
    (13) TYPE -> . INT
    (14) TYPE -> . FLOAT
    (15) TYPE -> . BOOL
    (16) TYPE -> . CHAR

    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    TYPE                           shift and go to state 85
    parameter_list                 shift and go to state 99

state 97

    (29) function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL . body RCURL
    (8) body -> . optional_variables_declaration_list optional_functions_declaration_list optional_statement_list
    (9) optional_variables_declaration_list -> . empty
    (10) optional_variables_declaration_list -> . variables_declaration_list
    (2) empty -> .
    (11) variables_declaration_list -> . TYPE variables_list SEMICOL
    (12) variables_declaration_list -> . TYPE variables_list SEMICOL variables_declaration_list
    (13) TYPE -> . INT
    (14) TYPE -> . FLOAT
    (15) TYPE -> . BOOL
    (16) TYPE -> . CHAR

    FUNCTION        reduce using rule 2 (empty -> .)
    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    RCURL           reduce using rule 2 (empty -> .)
    INT             shift and go to state 7
    FLOAT           shift and go to state 8
    BOOL            shift and go to state 9
    CHAR            shift and go to state 10

    TYPE                           shift and go to state 6
    body                           shift and go to state 100
    optional_variables_declaration_list shift and go to state 101
    empty                          shift and go to state 4
    variables_declaration_list     shift and go to state 5

state 98

    (23) class_declaration -> CLASS IDENT optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list . RCURL

    RCURL           shift and go to state 102


state 99

    (33) parameter_list -> TYPE IDENT COMMA parameter_list .

    RPAREN          reduce using rule 33 (parameter_list -> TYPE IDENT COMMA parameter_list .)


state 100

    (29) function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body . RCURL

    RCURL           shift and go to state 103


state 101

    (8) body -> optional_variables_declaration_list . optional_functions_declaration_list optional_statement_list
    (25) optional_functions_declaration_list -> . empty
    (26) optional_functions_declaration_list -> . functions_declaration_list
    (2) empty -> .
    (27) functions_declaration_list -> . function
    (28) functions_declaration_list -> . function functions_declaration_list
    (29) function -> . FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL

    RETURN          reduce using rule 2 (empty -> .)
    PRINT           reduce using rule 2 (empty -> .)
    IDENT           reduce using rule 2 (empty -> .)
    IF              reduce using rule 2 (empty -> .)
    WHILE           reduce using rule 2 (empty -> .)
    LCURL           reduce using rule 2 (empty -> .)
    RCURL           reduce using rule 2 (empty -> .)
    FUNCTION        shift and go to state 19

    optional_functions_declaration_list shift and go to state 104
    empty                          shift and go to state 26
    functions_declaration_list     shift and go to state 27
    function                       shift and go to state 24

state 102

    (23) class_declaration -> CLASS IDENT optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list RCURL .

    CLASS           reduce using rule 23 (class_declaration -> CLASS IDENT optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list RCURL .)
    $end            reduce using rule 23 (class_declaration -> CLASS IDENT optional_extends LCURL optional_variables_declaration_list optional_functions_declaration_list RCURL .)


state 103

    (29) function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .

    FUNCTION        reduce using rule 29 (function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    CLASS           reduce using rule 29 (function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    $end            reduce using rule 29 (function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    RCURL           reduce using rule 29 (function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    RETURN          reduce using rule 29 (function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    PRINT           reduce using rule 29 (function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    IDENT           reduce using rule 29 (function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    IF              reduce using rule 29 (function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    WHILE           reduce using rule 29 (function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)
    LCURL           reduce using rule 29 (function -> FUNCTION TYPE IDENT LPAREN optional_parameter_list RPAREN LCURL body RCURL .)


state 104

    (8) body -> optional_variables_declaration_list optional_functions_declaration_list . optional_statement_list
    (46) optional_statement_list -> . empty
    (47) optional_statement_list -> . statement_list
    (2) empty -> .
    (48) statement_list -> . statement
    (49) statement_list -> . statement statement_list
    (34) statement -> . statement_return
    (35) statement -> . statement_print
    (36) statement -> . statement_assignment
    (37) statement -> . statement_ifthenelse
    (38) statement -> . statement_while
    (39) statement -> . statement_compound
    (40) statement_return -> . RETURN expression SEMICOL
    (41) statement_print -> . PRINT LPAREN expression RPAREN SEMICOL
    (42) statement_assignment -> . IDENT ASSIGN expression SEMICOL
    (43) statement_ifthenelse -> . IF expression THEN statement ELSE statement
    (44) statement_while -> . WHILE expression DO statement
    (45) statement_compound -> . LCURL statement_list RCURL

    RCURL           reduce using rule 2 (empty -> .)
    RETURN          shift and go to state 115
    PRINT           shift and go to state 116
    IDENT           shift and go to state 15
    IF              shift and go to state 117
    WHILE           shift and go to state 118
    LCURL           shift and go to state 119

    optional_statement_list        shift and go to state 105
    empty                          shift and go to state 106
    statement_list                 shift and go to state 107
    statement                      shift and go to state 108
    statement_return               shift and go to state 109
    statement_print                shift and go to state 110
    statement_assignment           shift and go to state 111
    statement_ifthenelse           shift and go to state 112
    statement_while                shift and go to state 113
    statement_compound             shift and go to state 114

state 105

    (8) body -> optional_variables_declaration_list optional_functions_declaration_list optional_statement_list .

    RCURL           reduce using rule 8 (body -> optional_variables_declaration_list optional_functions_declaration_list optional_statement_list .)


state 106

    (46) optional_statement_list -> empty .

    RCURL           reduce using rule 46 (optional_statement_list -> empty .)


state 107

    (47) optional_statement_list -> statement_list .

    RCURL           reduce using rule 47 (optional_statement_list -> statement_list .)


state 108

    (48) statement_list -> statement .
    (49) statement_list -> statement . statement_list
    (48) statement_list -> . statement
    (49) statement_list -> . statement statement_list
    (34) statement -> . statement_return
    (35) statement -> . statement_print
    (36) statement -> . statement_assignment
    (37) statement -> . statement_ifthenelse
    (38) statement -> . statement_while
    (39) statement -> . statement_compound
    (40) statement_return -> . RETURN expression SEMICOL
    (41) statement_print -> . PRINT LPAREN expression RPAREN SEMICOL
    (42) statement_assignment -> . IDENT ASSIGN expression SEMICOL
    (43) statement_ifthenelse -> . IF expression THEN statement ELSE statement
    (44) statement_while -> . WHILE expression DO statement
    (45) statement_compound -> . LCURL statement_list RCURL

    RCURL           reduce using rule 48 (statement_list -> statement .)
    RETURN          shift and go to state 115
    PRINT           shift and go to state 116
    IDENT           shift and go to state 15
    IF              shift and go to state 117
    WHILE           shift and go to state 118
    LCURL           shift and go to state 119

    statement                      shift and go to state 108
    statement_list                 shift and go to state 120
    statement_return               shift and go to state 109
    statement_print                shift and go to state 110
    statement_assignment           shift and go to state 111
    statement_ifthenelse           shift and go to state 112
    statement_while                shift and go to state 113
    statement_compound             shift and go to state 114

state 109

    (34) statement -> statement_return .

    RETURN          reduce using rule 34 (statement -> statement_return .)
    PRINT           reduce using rule 34 (statement -> statement_return .)
    IDENT           reduce using rule 34 (statement -> statement_return .)
    IF              reduce using rule 34 (statement -> statement_return .)
    WHILE           reduce using rule 34 (statement -> statement_return .)
    LCURL           reduce using rule 34 (statement -> statement_return .)
    RCURL           reduce using rule 34 (statement -> statement_return .)
    ELSE            reduce using rule 34 (statement -> statement_return .)


state 110

    (35) statement -> statement_print .

    RETURN          reduce using rule 35 (statement -> statement_print .)
    PRINT           reduce using rule 35 (statement -> statement_print .)
    IDENT           reduce using rule 35 (statement -> statement_print .)
    IF              reduce using rule 35 (statement -> statement_print .)
    WHILE           reduce using rule 35 (statement -> statement_print .)
    LCURL           reduce using rule 35 (statement -> statement_print .)
    RCURL           reduce using rule 35 (statement -> statement_print .)
    ELSE            reduce using rule 35 (statement -> statement_print .)


state 111

    (36) statement -> statement_assignment .

    RETURN          reduce using rule 36 (statement -> statement_assignment .)
    PRINT           reduce using rule 36 (statement -> statement_assignment .)
    IDENT           reduce using rule 36 (statement -> statement_assignment .)
    IF              reduce using rule 36 (statement -> statement_assignment .)
    WHILE           reduce using rule 36 (statement -> statement_assignment .)
    LCURL           reduce using rule 36 (statement -> statement_assignment .)
    RCURL           reduce using rule 36 (statement -> statement_assignment .)
    ELSE            reduce using rule 36 (statement -> statement_assignment .)


state 112

    (37) statement -> statement_ifthenelse .

    RETURN          reduce using rule 37 (statement -> statement_ifthenelse .)
    PRINT           reduce using rule 37 (statement -> statement_ifthenelse .)
    IDENT           reduce using rule 37 (statement -> statement_ifthenelse .)
    IF              reduce using rule 37 (statement -> statement_ifthenelse .)
    WHILE           reduce using rule 37 (statement -> statement_ifthenelse .)
    LCURL           reduce using rule 37 (statement -> statement_ifthenelse .)
    RCURL           reduce using rule 37 (statement -> statement_ifthenelse .)
    ELSE            reduce using rule 37 (statement -> statement_ifthenelse .)


state 113

    (38) statement -> statement_while .

    RETURN          reduce using rule 38 (statement -> statement_while .)
    PRINT           reduce using rule 38 (statement -> statement_while .)
    IDENT           reduce using rule 38 (statement -> statement_while .)
    IF              reduce using rule 38 (statement -> statement_while .)
    WHILE           reduce using rule 38 (statement -> statement_while .)
    LCURL           reduce using rule 38 (statement -> statement_while .)
    RCURL           reduce using rule 38 (statement -> statement_while .)
    ELSE            reduce using rule 38 (statement -> statement_while .)


state 114

    (39) statement -> statement_compound .

    RETURN          reduce using rule 39 (statement -> statement_compound .)
    PRINT           reduce using rule 39 (statement -> statement_compound .)
    IDENT           reduce using rule 39 (statement -> statement_compound .)
    IF              reduce using rule 39 (statement -> statement_compound .)
    WHILE           reduce using rule 39 (statement -> statement_compound .)
    LCURL           reduce using rule 39 (statement -> statement_compound .)
    RCURL           reduce using rule 39 (statement -> statement_compound .)
    ELSE            reduce using rule 39 (statement -> statement_compound .)


state 115

    (40) statement_return -> RETURN . expression SEMICOL
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 121
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 116

    (41) statement_print -> PRINT . LPAREN expression RPAREN SEMICOL

    LPAREN          shift and go to state 122


state 117

    (43) statement_ifthenelse -> IF . expression THEN statement ELSE statement
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 123
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 118

    (44) statement_while -> WHILE . expression DO statement
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 124
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 119

    (45) statement_compound -> LCURL . statement_list RCURL
    (48) statement_list -> . statement
    (49) statement_list -> . statement statement_list
    (34) statement -> . statement_return
    (35) statement -> . statement_print
    (36) statement -> . statement_assignment
    (37) statement -> . statement_ifthenelse
    (38) statement -> . statement_while
    (39) statement -> . statement_compound
    (40) statement_return -> . RETURN expression SEMICOL
    (41) statement_print -> . PRINT LPAREN expression RPAREN SEMICOL
    (42) statement_assignment -> . IDENT ASSIGN expression SEMICOL
    (43) statement_ifthenelse -> . IF expression THEN statement ELSE statement
    (44) statement_while -> . WHILE expression DO statement
    (45) statement_compound -> . LCURL statement_list RCURL

    RETURN          shift and go to state 115
    PRINT           shift and go to state 116
    IDENT           shift and go to state 15
    IF              shift and go to state 117
    WHILE           shift and go to state 118
    LCURL           shift and go to state 119

    statement_list                 shift and go to state 125
    statement                      shift and go to state 108
    statement_return               shift and go to state 109
    statement_print                shift and go to state 110
    statement_assignment           shift and go to state 111
    statement_ifthenelse           shift and go to state 112
    statement_while                shift and go to state 113
    statement_compound             shift and go to state 114

state 120

    (49) statement_list -> statement statement_list .

    RCURL           reduce using rule 49 (statement_list -> statement statement_list .)


state 121

    (40) statement_return -> RETURN expression . SEMICOL
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    SEMICOL         shift and go to state 126
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64


state 122

    (41) statement_print -> PRINT LPAREN . expression RPAREN SEMICOL
    (50) expression -> . expression_integer
    (51) expression -> . expression_float
    (52) expression -> . expression_bool
    (53) expression -> . expression_char
    (54) expression -> . expression_identifier
    (55) expression -> . expression_call
    (56) expression -> . expression_binop
    (57) expression -> . expression_attribute
    (58) expression_integer -> . INT
    (59) expression_float -> . FLOAT
    (60) expression_bool -> . BOOL
    (61) expression_char -> . CHAR
    (62) expression_identifier -> . IDENT
    (63) expression_call -> . IDENT LPAREN optional_expression_list RPAREN
    (65) expression_binop -> . expression PLUS expression
    (66) expression_binop -> . expression MINUS expression
    (67) expression_binop -> . expression TIMES expression
    (68) expression_binop -> . expression DIVIDE expression
    (69) expression_binop -> . expression EQ expression
    (70) expression_binop -> . expression NEQ expression
    (71) expression_binop -> . expression LT expression
    (72) expression_binop -> . expression GT expression
    (73) expression_binop -> . expression LTE expression
    (74) expression_binop -> . expression GTE expression
    (64) expression_attribute -> . IDENT DOT IDENT

    INT             shift and go to state 39
    FLOAT           shift and go to state 40
    BOOL            shift and go to state 41
    CHAR            shift and go to state 42
    IDENT           shift and go to state 29

    expression                     shift and go to state 127
    expression_integer             shift and go to state 31
    expression_float               shift and go to state 32
    expression_bool                shift and go to state 33
    expression_char                shift and go to state 34
    expression_identifier          shift and go to state 35
    expression_call                shift and go to state 36
    expression_binop               shift and go to state 37
    expression_attribute           shift and go to state 38

state 123

    (43) statement_ifthenelse -> IF expression . THEN statement ELSE statement
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    THEN            shift and go to state 128
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64


state 124

    (44) statement_while -> WHILE expression . DO statement
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    DO              shift and go to state 129
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64


state 125

    (45) statement_compound -> LCURL statement_list . RCURL

    RCURL           shift and go to state 130


state 126

    (40) statement_return -> RETURN expression SEMICOL .

    RETURN          reduce using rule 40 (statement_return -> RETURN expression SEMICOL .)
    PRINT           reduce using rule 40 (statement_return -> RETURN expression SEMICOL .)
    IDENT           reduce using rule 40 (statement_return -> RETURN expression SEMICOL .)
    IF              reduce using rule 40 (statement_return -> RETURN expression SEMICOL .)
    WHILE           reduce using rule 40 (statement_return -> RETURN expression SEMICOL .)
    LCURL           reduce using rule 40 (statement_return -> RETURN expression SEMICOL .)
    RCURL           reduce using rule 40 (statement_return -> RETURN expression SEMICOL .)
    ELSE            reduce using rule 40 (statement_return -> RETURN expression SEMICOL .)


state 127

    (41) statement_print -> PRINT LPAREN expression . RPAREN SEMICOL
    (65) expression_binop -> expression . PLUS expression
    (66) expression_binop -> expression . MINUS expression
    (67) expression_binop -> expression . TIMES expression
    (68) expression_binop -> expression . DIVIDE expression
    (69) expression_binop -> expression . EQ expression
    (70) expression_binop -> expression . NEQ expression
    (71) expression_binop -> expression . LT expression
    (72) expression_binop -> expression . GT expression
    (73) expression_binop -> expression . LTE expression
    (74) expression_binop -> expression . GTE expression

    RPAREN          shift and go to state 131
    PLUS            shift and go to state 55
    MINUS           shift and go to state 56
    TIMES           shift and go to state 57
    DIVIDE          shift and go to state 58
    EQ              shift and go to state 59
    NEQ             shift and go to state 60
    LT              shift and go to state 61
    GT              shift and go to state 62
    LTE             shift and go to state 63
    GTE             shift and go to state 64


state 128

    (43) statement_ifthenelse -> IF expression THEN . statement ELSE statement
    (34) statement -> . statement_return
    (35) statement -> . statement_print
    (36) statement -> . statement_assignment
    (37) statement -> . statement_ifthenelse
    (38) statement -> . statement_while
    (39) statement -> . statement_compound
    (40) statement_return -> . RETURN expression SEMICOL
    (41) statement_print -> . PRINT LPAREN expression RPAREN SEMICOL
    (42) statement_assignment -> . IDENT ASSIGN expression SEMICOL
    (43) statement_ifthenelse -> . IF expression THEN statement ELSE statement
    (44) statement_while -> . WHILE expression DO statement
    (45) statement_compound -> . LCURL statement_list RCURL

    RETURN          shift and go to state 115
    PRINT           shift and go to state 116
    IDENT           shift and go to state 15
    IF              shift and go to state 117
    WHILE           shift and go to state 118
    LCURL           shift and go to state 119

    statement                      shift and go to state 132
    statement_return               shift and go to state 109
    statement_print                shift and go to state 110
    statement_assignment           shift and go to state 111
    statement_ifthenelse           shift and go to state 112
    statement_while                shift and go to state 113
    statement_compound             shift and go to state 114

state 129

    (44) statement_while -> WHILE expression DO . statement
    (34) statement -> . statement_return
    (35) statement -> . statement_print
    (36) statement -> . statement_assignment
    (37) statement -> . statement_ifthenelse
    (38) statement -> . statement_while
    (39) statement -> . statement_compound
    (40) statement_return -> . RETURN expression SEMICOL
    (41) statement_print -> . PRINT LPAREN expression RPAREN SEMICOL
    (42) statement_assignment -> . IDENT ASSIGN expression SEMICOL
    (43) statement_ifthenelse -> . IF expression THEN statement ELSE statement
    (44) statement_while -> . WHILE expression DO statement
    (45) statement_compound -> . LCURL statement_list RCURL

    RETURN          shift and go to state 115
    PRINT           shift and go to state 116
    IDENT           shift and go to state 15
    IF              shift and go to state 117
    WHILE           shift and go to state 118
    LCURL           shift and go to state 119

    statement                      shift and go to state 133
    statement_return               shift and go to state 109
    statement_print                shift and go to state 110
    statement_assignment           shift and go to state 111
    statement_ifthenelse           shift and go to state 112
    statement_while                shift and go to state 113
    statement_compound             shift and go to state 114

state 130

    (45) statement_compound -> LCURL statement_list RCURL .

    RETURN          reduce using rule 45 (statement_compound -> LCURL statement_list RCURL .)
    PRINT           reduce using rule 45 (statement_compound -> LCURL statement_list RCURL .)
    IDENT           reduce using rule 45 (statement_compound -> LCURL statement_list RCURL .)
    IF              reduce using rule 45 (statement_compound -> LCURL statement_list RCURL .)
    WHILE           reduce using rule 45 (statement_compound -> LCURL statement_list RCURL .)
    LCURL           reduce using rule 45 (statement_compound -> LCURL statement_list RCURL .)
    RCURL           reduce using rule 45 (statement_compound -> LCURL statement_list RCURL .)
    ELSE            reduce using rule 45 (statement_compound -> LCURL statement_list RCURL .)


state 131

    (41) statement_print -> PRINT LPAREN expression RPAREN . SEMICOL

    SEMICOL         shift and go to state 134


state 132

    (43) statement_ifthenelse -> IF expression THEN statement . ELSE statement

    ELSE            shift and go to state 135


state 133

    (44) statement_while -> WHILE expression DO statement .

    RETURN          reduce using rule 44 (statement_while -> WHILE expression DO statement .)
    PRINT           reduce using rule 44 (statement_while -> WHILE expression DO statement .)
    IDENT           reduce using rule 44 (statement_while -> WHILE expression DO statement .)
    IF              reduce using rule 44 (statement_while -> WHILE expression DO statement .)
    WHILE           reduce using rule 44 (statement_while -> WHILE expression DO statement .)
    LCURL           reduce using rule 44 (statement_while -> WHILE expression DO statement .)
    RCURL           reduce using rule 44 (statement_while -> WHILE expression DO statement .)
    ELSE            reduce using rule 44 (statement_while -> WHILE expression DO statement .)


state 134

    (41) statement_print -> PRINT LPAREN expression RPAREN SEMICOL .

    RETURN          reduce using rule 41 (statement_print -> PRINT LPAREN expression RPAREN SEMICOL .)
    PRINT           reduce using rule 41 (statement_print -> PRINT LPAREN expression RPAREN SEMICOL .)
    IDENT           reduce using rule 41 (statement_print -> PRINT LPAREN expression RPAREN SEMICOL .)
    IF              reduce using rule 41 (statement_print -> PRINT LPAREN expression RPAREN SEMICOL .)
    WHILE           reduce using rule 41 (statement_print -> PRINT LPAREN expression RPAREN SEMICOL .)
    LCURL           reduce using rule 41 (statement_print -> PRINT LPAREN expression RPAREN SEMICOL .)
    RCURL           reduce using rule 41 (statement_print -> PRINT LPAREN expression RPAREN SEMICOL .)
    ELSE            reduce using rule 41 (statement_print -> PRINT LPAREN expression RPAREN SEMICOL .)


state 135

    (43) statement_ifthenelse -> IF expression THEN statement ELSE . statement
    (34) statement -> . statement_return
    (35) statement -> . statement_print
    (36) statement -> . statement_assignment
    (37) statement -> . statement_ifthenelse
    (38) statement -> . statement_while
    (39) statement -> . statement_compound
    (40) statement_return -> . RETURN expression SEMICOL
    (41) statement_print -> . PRINT LPAREN expression RPAREN SEMICOL
    (42) statement_assignment -> . IDENT ASSIGN expression SEMICOL
    (43) statement_ifthenelse -> . IF expression THEN statement ELSE statement
    (44) statement_while -> . WHILE expression DO statement
    (45) statement_compound -> . LCURL statement_list RCURL

    RETURN          shift and go to state 115
    PRINT           shift and go to state 116
    IDENT           shift and go to state 15
    IF              shift and go to state 117
    WHILE           shift and go to state 118
    LCURL           shift and go to state 119

    statement                      shift and go to state 136
    statement_return               shift and go to state 109
    statement_print                shift and go to state 110
    statement_assignment           shift and go to state 111
    statement_ifthenelse           shift and go to state 112
    statement_while                shift and go to state 113
    statement_compound             shift and go to state 114

state 136

    (43) statement_ifthenelse -> IF expression THEN statement ELSE statement .

    RETURN          reduce using rule 43 (statement_ifthenelse -> IF expression THEN statement ELSE statement .)
    PRINT           reduce using rule 43 (statement_ifthenelse -> IF expression THEN statement ELSE statement .)
    IDENT           reduce using rule 43 (statement_ifthenelse -> IF expression THEN statement ELSE statement .)
    IF              reduce using rule 43 (statement_ifthenelse -> IF expression THEN statement ELSE statement .)
    WHILE           reduce using rule 43 (statement_ifthenelse -> IF expression THEN statement ELSE statement .)
    LCURL           reduce using rule 43 (statement_ifthenelse -> IF expression THEN statement ELSE statement .)
    RCURL           reduce using rule 43 (statement_ifthenelse -> IF expression THEN statement ELSE statement .)
    ELSE            reduce using rule 43 (statement_ifthenelse -> IF expression THEN statement ELSE statement .)

